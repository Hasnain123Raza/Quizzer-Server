{"version":3,"sources":["services/authenticatedSlice/selectors.js","components/Header/index.js","services/authenticatedSlice/api.js","services/authenticatedSlice/index.js","components/PostRequestButton/components/LoadingButton/index.js","components/PostRequestButton/components/PostButton/index.js","components/PostRequestButton/components/RetryButton/index.js","components/PostRequestButton/index.js","components/PostRequestLoadingCard/index.js","components/ProtectedRoute/index.js","areas/Quiz/scenes/Browse/services/api.js","areas/Quiz/scenes/Browse/services/browseSlice/selectors.js","areas/Quiz/scenes/Browse/services/grid.js","areas/Quiz/scenes/Browse/services/browseSlice/index.js","components/Paginator/components/pages.js","components/Paginator/components/MinimalPagination/index.js","components/Paginator/components/CollapsedPagination/index.js","components/Paginator/components/ExpandedPagination/index.js","components/Paginator/index.js","areas/Quiz/scenes/Browse/components/LoadingQuizCard/index.js","areas/Quiz/scenes/Browse/components/QuizCard/index.js","areas/Quiz/scenes/Browse/index.js","areas/Quiz/scenes/Create/services/api.js","areas/Quiz/scenes/Create/services/quizSchema.js","areas/Quiz/scenes/Create/services/createSlice/index.js","areas/Quiz/scenes/Create/services/createSlice/selectors.js","areas/Quiz/scenes/Create/components/Choice/index.js","areas/Quiz/scenes/Create/components/DummyChoice/index.js","areas/Quiz/scenes/Create/components/Question/index.js","areas/Quiz/scenes/Create/index.js","areas/Quiz/scenes/Open/services/openSlice/selectors.js","areas/Quiz/scenes/Open/components/QuizCard.js","areas/Quiz/scenes/Open/components/LoadingQuizCard.js","areas/Quiz/scenes/Open/services/api.js","areas/Quiz/scenes/Open/services/openSlice/index.js","areas/Quiz/scenes/Open/index.js","areas/Quiz/scenes/Take/services/api.js","areas/Quiz/scenes/Take/services/takeSlice/selectors.js","areas/Quiz/scenes/Take/services/takeSlice/index.js","areas/Quiz/scenes/Take/components/LoadingQuizCard/index.js","areas/Quiz/scenes/Take/components/Choice/index.js","areas/Quiz/scenes/Take/components/QuestionCard/index.js","areas/Quiz/scenes/Take/index.js","areas/Authentication/scenes/Login/services/api.js","areas/Authentication/services/userSchema.js","areas/Authentication/scenes/Login/services/loginSlice/index.js","areas/Authentication/scenes/Login/services/loginSlice/selectors.js","areas/Authentication/scenes/Login/index.js","areas/Authentication/scenes/Register/services/api.js","areas/Authentication/scenes/Register/services/registerSlice/index.js","areas/Authentication/scenes/Register/services/registerSlice/selectors.js","areas/Authentication/scenes/Register/index.js","areas/Authentication/scenes/Account/services/api.js","areas/Authentication/scenes/Account/services/accountSlice/index.js","areas/Authentication/scenes/Account/services/accountSlice/selectors.js","areas/Authentication/scenes/Account/index.js","components/Main/index.js","areas/Quiz/index.js","areas/Authentication/index.js","components/Footer/index.js","App.js","areas/Quiz/services/quizReducer.js","areas/Authentication/services/authenticationReducer.js","services/redux/store.js","index.js"],"names":["sGetAuthenticatedUser","state","authenticated","sGetIsAuthenticated","undefined","sGetAuthenticatedRequestStatus","getAuthenticatedRequestStatus","sGetHasAuthenticatedBefore","firstTime","isAuthenticated","useSelector","className","Navbar","bg","variant","exact","to","Brand","Nav","style","flex","Link","Fragment","NavDropdown","title","Item","Divider","fetchAuthenticated","a","fetch","response","json","data","initialState","getAuthenticated","createAsyncThunk","authenticatedSlice","createSlice","name","reducers","reset","action","extraReducers","builder","addCase","pending","fulfilled","payload","rejected","actions","Button","disabled","Spinner","size","animation","initiatePostRequest","idleText","onClick","props","postRequestStatus","PostButton","LoadingButton","RetryButton","pendingHeaderText","rejectedHeaderText","pendingBodyText","rejectedBodyText","Card","Header","Body","Footer","PostRequestButton","children","rest","location","useLocation","query","URLSearchParams","search","set","pathname","toString","fetchQuizCount","count","fetchSimplifiedQuizzes","pageIndex","pageSize","sGetQuizCountRequestStatus","quiz","browse","quizCountRequestStatus","sGetSimplifiedQuizzesRequestStatus","simplifiedQuizzesRequestStatus","sGetCurrentPage","currentPage","sGetTotalPages","cardsPerRow","totalRows","totalQuizzes","quizzesPerPage","Math","ceil","getTotalPages","quizCount","sGetQuizCount","simplifiedQuizzes","getQuizCount","getSimplifiedQuizzes","getState","browseSlice","setCurrentPage","getPagesToGenerate","totalPages","pageChangeCallback","pagesToGenerate","counter","push","generatePages","map","index","Pagination","active","generateMinimalPages","MinimalPagination","generatePrevPagination","newPageValue","Prev","generateCollapsedPages","generateNextPagination","Next","CollapsedPagination","generateFirstPagination","First","generateLeftEllipse","shouldGenerateLeftEllipsis","Ellipsis","pageValue","getLeftEllipsisPageValue","generateExpandedPages","shift","pop","generateRightEllipse","shouldGenerateRightEllipsis","getRightEllipsisPageValue","generateLastPagination","Last","ExpandedPagination","loadResources","resourcesFailedToLoad","Title","Text","quizId","_id","quizTitle","quizTrimmedDescription","description","length","substring","dispatch","useDispatch","history","useHistory","queriedPage","parseInt","get","rows","quizzes","pageStartingCardIndex","rowsData","rowIndex","startingCardIndex","cardIndex","cardData","getRowsFromQuizzes","sGetSimplifiedQuizzes","resourcesLoaded","useEffect","Container","fluid","row","Row","quizIndex","Col","md","QuizCard","LoadingQuizCard","Paginator","newPage","postQuiz","requestOptions","method","headers","body","JSON","stringify","choiceSchema","Joi","object","prompt","string","trim","min","max","required","correct","boolean","questionSchema","choices","array","items","has","valid","quizSchema","questions","activeQuestionIndex","postQuizRequestStatus","postedQuizId","validationErrors","postQuizCreateForm","rejectWithValue","result","validate","abortEarly","error","details","resetForm","createQuizSlice","resetPostQuizRequest","setValidationErrors","setQuizTitle","setQuizDescription","addQuestion","removeQuestion","splice","setQuestionPrompt","reducer","questionIndex","questionPrompt","prepare","addChoice","removeChoice","choiceIndex","setChoicePrompt","choicePrompt","setChoiceCorrect","choiceCorrect","setActiveQuestionIndex","sGetQuiz","create","sGetQuizTitle","sGetQuizDescription","sGetQuestions","sGetQuestion","sGetChoices","sGetChoice","sGetActiveQuestionIndex","sGetPostQuizRequestStatus","sGetPostedQuizId","sGetQuizTitleError","filter","path","message","sGetQuizDescriptionError","sGetQuestionsAmountError","focus","setFocusChoiceIndex","questionId","sGetChoicePrompt","sGetChoiceCorrect","inputRef","Form","Group","controlId","Control","autoComplete","type","placeholder","value","ref","choicePromptInput","onChange","event","target","Check","label","checked","onChangeCallback","useState","focusChoiceIndex","sGetQuestionPrompt","isQuestionActive","choicesCount","questionPromptError","sGetQuestionPromptError","choiceCriteriaError","sGetChoiceCriteriaError","Collapse","in","icon","faTrash","Label","isInvalid","Feedback","choice","Choice","DummyChoice","display","quizDescription","quizTitleError","quizDescriptionError","quizQuestionsAmountError","question","Question","faPlus","sGetSimplifiedQuiz","open","simplifiedQuiz","sGetSimplifiedQuizId","sGetSimplifiedQuizTitle","sGetSimplifiedQuizDescription","sGetSimplifiedQuizRequestStatus","simplifiedQuizRequestStatus","fetchSimplifiedQuiz","getSimplifiedQuiz","openSlice","useParams","id","fetchUnrevealedQuiz","fetchCorrectChoices","sGetQuizRequestStatus","take","quizRequestStatus","sGetQuizId","sGetQuestionCount","choiceId","sGetCorrectChoicesRequestStatus","correctChoicesRequestStatus","sGetCurrentQuestionId","currentQuestionId","sGetSelectedChoiceId","selectedChoiceId","sGetSelectedChoiceCorrect","selectedChoiceCorrect","sGetTotalCorrectQuestions","totalCorrectQuestions","sGetTotalWrongQuestions","totalWrongQuestions","getUnrevealedQuiz","getCorrectChoices","correctChoices","isCorrect","some","setSelectedChoiceCorrect","setTotalCorrectQuestions","setTotalWrongQuestions","quizFinished","takeSlice","clearCorrectChoices","incrementCurrentQuestionId","setSelectedChoiceId","loadQuiz","quizFailedToLoad","choiceClass","totalQuestions","currentQuestion","isLastQuestion","ProgressBar","now","quizLoaded","QuestionCard","postLogin","login","userSchema","username","alphanum","password","postLoginRequestStatus","postLoginForm","user","field","loginSlice","setUsername","setPassword","sGetUsername","authentication","sGetPassword","sGetUser","sGetPostLoginRequestStatus","sGetValidationErrors","sGetUsernameError","sGetPasswordError","redirectPath","usernameError","passwordError","Boolean","postRegister","register","postRegisterRequestStatus","postRegisterForm","registerSlice","sGetPostRegisterRequestStatus","postLogout","postLogoutRequestStatus","postLogoutRequest","_","accountSlice","sGetPostLogoutRequestStatus","account","authenticatedUser","authenticatedRequestStatus","backgroundColor","Browse","ProtectedRoute","Create","Open","Take","Login","Register","Account","PostRequestLoadingCard","App","Main","quizReducer","combineReducers","browseReducer","createReducer","openReducer","takeReducer","authenticationReducer","loginReducer","registerReducer","accountReducer","store","configureStore","authenticatedReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.70ef2883.chunk.js","sourcesContent":["export const sGetAuthenticatedUser = (state) =>\r\n  state.authenticated.authenticated;\r\n\r\nexport const sGetIsAuthenticated = (state) =>\r\n  state.authenticated.authenticated !== null &&\r\n  state.authenticated.authenticated !== undefined;\r\n\r\nexport const sGetAuthenticatedRequestStatus = (state) =>\r\n  state.authenticated.getAuthenticatedRequestStatus;\r\n\r\nexport const sGetHasAuthenticatedBefore = (state) =>\r\n  state.authenticated.firstTime == false;\r\n","import { Navbar, NavDropdown, Nav } from \"react-bootstrap\";\r\nimport { LinkContainer } from \"react-router-bootstrap\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { sGetIsAuthenticated } from \"../../services/authenticatedSlice/selectors.js\";\r\nimport React from \"react\";\r\n\r\nexport default function () {\r\n  const isAuthenticated = useSelector(sGetIsAuthenticated);\r\n\r\n  return (\r\n    <div className=\"header\">\r\n      <Navbar bg=\"dark\" variant=\"dark\">\r\n        <LinkContainer exact to=\"/\">\r\n          <Navbar.Brand>\r\n            <h3>Quizzer</h3>\r\n          </Navbar.Brand>\r\n        </LinkContainer>\r\n        <Nav className=\"d-none d-md-inline-flex\" style={{ flex: 1 }}>\r\n          <LinkContainer exact to=\"/\">\r\n            <Nav.Link>Home</Nav.Link>\r\n          </LinkContainer>\r\n          <LinkContainer to=\"/quiz/browse\">\r\n            <Nav.Link>Browse</Nav.Link>\r\n          </LinkContainer>\r\n          <LinkContainer to=\"/quiz/create\">\r\n            <Nav.Link>Create</Nav.Link>\r\n          </LinkContainer>\r\n          {isAuthenticated ? (\r\n            <LinkContainer className=\"ml-auto\" to=\"/authentication/account\">\r\n              <Nav.Link>Account</Nav.Link>\r\n            </LinkContainer>\r\n          ) : (\r\n            <React.Fragment>\r\n              <LinkContainer className=\"ml-auto\" to=\"/authentication/login\">\r\n                <Nav.Link>Login</Nav.Link>\r\n              </LinkContainer>\r\n              <LinkContainer to=\"/authentication/register\">\r\n                <Nav.Link>Register</Nav.Link>\r\n              </LinkContainer>\r\n            </React.Fragment>\r\n          )}\r\n        </Nav>\r\n\r\n        <Nav className=\"ml-auto d-md-none\">\r\n          <NavDropdown title=\"Menu\">\r\n            <LinkContainer exact to=\"/\">\r\n              <NavDropdown.Item>Home</NavDropdown.Item>\r\n            </LinkContainer>\r\n            <LinkContainer to=\"/quiz/browse\">\r\n              <NavDropdown.Item>Browse</NavDropdown.Item>\r\n            </LinkContainer>\r\n            <LinkContainer to=\"/quiz/create\">\r\n              <NavDropdown.Item>Create</NavDropdown.Item>\r\n            </LinkContainer>\r\n            <NavDropdown.Divider />\r\n            {isAuthenticated ? (\r\n              <LinkContainer to=\"/authentication/account\">\r\n                <NavDropdown.Item>Account</NavDropdown.Item>\r\n              </LinkContainer>\r\n            ) : (\r\n              <React.Fragment>\r\n                <LinkContainer to=\"/authentication/login\">\r\n                  <NavDropdown.Item>Login</NavDropdown.Item>\r\n                </LinkContainer>\r\n                <LinkContainer to=\"/authentication/register\">\r\n                  <NavDropdown.Item>Register</NavDropdown.Item>\r\n                </LinkContainer>\r\n              </React.Fragment>\r\n            )}\r\n          </NavDropdown>\r\n        </Nav>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}\r\n","export async function fetchAuthenticated() {\r\n  const response = await fetch(\"/api/authenticated\");\r\n  const data = await response.json();\r\n  return data.authenticated;\r\n}\r\n","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { fetchAuthenticated } from \"./api.js\";\r\n\r\nconst initialState = {\r\n  authenticated: null,\r\n  getAuthenticatedRequestStatus: \"idle\",\r\n  firstTime: true,\r\n};\r\n\r\nexport const getAuthenticated = createAsyncThunk(\r\n  \"authenticated/getAuthenticated\",\r\n  async () => {\r\n    const data = await fetchAuthenticated();\r\n    return data;\r\n  }\r\n);\r\n\r\nconst authenticatedSlice = createSlice({\r\n  name: \"authenticated\",\r\n  initialState,\r\n  reducers: {\r\n    reset(state, action) {\r\n      return { ...initialState };\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(getAuthenticated.pending, (state, action) => {\r\n        state.getAuthenticatedRequestStatus = \"pending\";\r\n        state.authenticated = null;\r\n        state.firstTime = false;\r\n      })\r\n      .addCase(getAuthenticated.fulfilled, (state, action) => {\r\n        state.getAuthenticatedRequestStatus = \"fulfilled\";\r\n        state.authenticated = action.payload;\r\n      })\r\n      .addCase(getAuthenticated.rejected, (state, action) => {\r\n        state.getAuthenticatedRequestStatus = \"rejected\";\r\n        state.authenticated = null;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { reset } = authenticatedSlice.actions;\r\n\r\nexport default authenticatedSlice.reducer;\r\n","import { Button, Spinner } from \"react-bootstrap\";\r\n\r\nexport default function () {\r\n  return (\r\n    <Button variant=\"secondary\" disabled>\r\n      <Spinner size=\"sm\" animation=\"border\" />\r\n    </Button>\r\n  );\r\n}\r\n","import { Button } from \"react-bootstrap\";\r\n\r\nexport default function ({ initiatePostRequest, idleText }) {\r\n  return (\r\n    <Button variant=\"success\" onClick={initiatePostRequest}>\r\n      {idleText}\r\n    </Button>\r\n  );\r\n}\r\n","import { Button } from \"react-bootstrap\";\r\n\r\nexport default function ({ initiatePostRequest }) {\r\n  return (\r\n    <Button variant=\"danger\" onClick={initiatePostRequest}>\r\n      Retry\r\n    </Button>\r\n  );\r\n}\r\n","import LoadingButton from \"./components/LoadingButton\";\r\nimport PostButton from \"./components/PostButton\";\r\nimport RetryButton from \"./components/RetryButton\";\r\n\r\nexport default function (props) {\r\n  const { className, initiatePostRequest, postRequestStatus, idleText } = props;\r\n\r\n  return (\r\n    <div className={className + \" d-inline\"}>\r\n      {postRequestStatus == \"idle\" ? (\r\n        <PostButton\r\n          initiatePostRequest={initiatePostRequest}\r\n          idleText={idleText}\r\n        />\r\n      ) : postRequestStatus == \"pending\" ? (\r\n        <LoadingButton />\r\n      ) : postRequestStatus == \"fulfilled\" ? (\r\n        \"Done\"\r\n      ) : postRequestStatus == \"rejected\" ? (\r\n        <RetryButton initiatePostRequest={initiatePostRequest} />\r\n      ) : (\r\n        \"Default\"\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import { Card } from \"react-bootstrap\";\r\nimport PostRequestButton from \"../PostRequestButton\";\r\n\r\nexport default function (props) {\r\n  const {\r\n    className,\r\n    initiatePostRequest,\r\n    postRequestStatus,\r\n    pendingHeaderText,\r\n    rejectedHeaderText,\r\n    pendingBodyText,\r\n    rejectedBodyText,\r\n  } = props;\r\n\r\n  return (\r\n    <div className={className}>\r\n      <Card>\r\n        <Card.Header>\r\n          <h4>\r\n            {postRequestStatus == \"rejected\"\r\n              ? rejectedHeaderText\r\n              : pendingHeaderText}\r\n          </h4>\r\n        </Card.Header>\r\n        <Card.Body>\r\n          {postRequestStatus == \"rejected\" ? rejectedBodyText : pendingBodyText}\r\n        </Card.Body>\r\n        <Card.Footer className=\"d-flex\">\r\n          <PostRequestButton\r\n            className=\"ml-auto\"\r\n            initiatePostRequest={initiatePostRequest}\r\n            postRequestStatus={postRequestStatus}\r\n            idleText=\"Default\"\r\n          />\r\n        </Card.Footer>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","import { Route, Redirect, useLocation, useHistory } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { sGetIsAuthenticated } from \"../../services/authenticatedSlice/selectors.js\";\r\n\r\nfunction useQuery() {\r\n  return new URLSearchParams(useLocation().search);\r\n}\r\n\r\nexport default function ({ children, ...rest }) {\r\n  const location = useLocation();\r\n  const query = useQuery();\r\n  query.set(\"redirect\", location.pathname);\r\n\r\n  const isAuthenticated = useSelector(sGetIsAuthenticated);\r\n\r\n  return (\r\n    <Route {...rest}>\r\n      {isAuthenticated ? (\r\n        children\r\n      ) : (\r\n        <Redirect exact to={\"/authentication/login?\" + query.toString()} />\r\n      )}\r\n    </Route>\r\n  );\r\n}\r\n","export async function fetchQuizCount() {\r\n  const response = await fetch(\"/api/quiz/browse/quizCount\");\r\n  const data = await response.json();\r\n  return data.count;\r\n}\r\n\r\nexport async function fetchSimplifiedQuizzes(pageIndex, pageSize) {\r\n  const response = await fetch(\r\n    `/api/quiz/browse/simplifiedQuizzes/${pageIndex}/${pageSize}`\r\n  );\r\n  const data = await response.json();\r\n  return data;\r\n}\r\n","import { getTotalPages, getRowsFromQuizzes } from \"../grid.js\";\r\n\r\nexport const sGetQuizCount = (state) => state.quiz.browse.quizCount;\r\n\r\nexport const sGetQuizCountRequestStatus = (state) =>\r\n  state.quiz.browse.quizCountRequestStatus;\r\n\r\nexport const sGetSimplifiedQuizzes = (state) =>\r\n  state.quiz.browse.simplifiedQuizzes;\r\n\r\nexport const sGetSimplifiedQuizzesRequestStatus = (state) =>\r\n  state.quiz.browse.simplifiedQuizzesRequestStatus;\r\n\r\nexport const sGetCurrentPage = (state) => state.quiz.browse.currentPage;\r\n\r\nexport const sGetTotalPages = (cardsPerRow, totalRows) => (state) =>\r\n  getTotalPages(cardsPerRow, totalRows, sGetQuizCount(state));\r\n\r\nexport const sGetRows = (cardsPerRow, totalRows) => (state) =>\r\n  getRowsFromQuizzes(\r\n    cardsPerRow,\r\n    totalRows,\r\n    sGetSimplifiedQuizzes(state),\r\n    sGetCurrentPage(state)\r\n  );\r\n","export function getTotalPages(cardsPerRow, totalRows, totalQuizzes) {\r\n  let quizzesPerPage = cardsPerRow * totalRows;\r\n  return Math.ceil(totalQuizzes / quizzesPerPage);\r\n}\r\n\r\nexport function getRowsFromQuizzes(\r\n  cardsPerRow,\r\n  totalRows,\r\n  quizzes,\r\n  currentPage\r\n) {\r\n  let pageStartingCardIndex = (currentPage - 1) * totalRows * cardsPerRow;\r\n\r\n  let rowsData = [];\r\n  for (let rowIndex = 0; rowIndex < totalRows; rowIndex++) {\r\n    rowsData[rowIndex] = [];\r\n    let rowStartingCardIndex = rowIndex * cardsPerRow;\r\n    let startingCardIndex = pageStartingCardIndex + rowStartingCardIndex;\r\n    for (\r\n      let cardIndex = startingCardIndex;\r\n      cardIndex < startingCardIndex + cardsPerRow;\r\n      cardIndex++\r\n    ) {\r\n      let cardData = quizzes[cardIndex];\r\n      if (cardData) rowsData[rowIndex].push(cardData);\r\n    }\r\n  }\r\n  return rowsData;\r\n}\r\n","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { fetchQuizCount, fetchSimplifiedQuizzes } from \"../api.js\";\r\nimport { sGetCurrentPage } from \"./selectors.js\";\r\n\r\nconst initialState = {\r\n  quizCount: 0,\r\n  simplifiedQuizzes: [],\r\n  quizCountRequestStatus: \"idle\",\r\n  simplifiedQuizzesRequestStatus: \"idle\",\r\n  currentPage: 1,\r\n};\r\n\r\nexport const getQuizCount = createAsyncThunk(\r\n  \"browse/getQuizCount\",\r\n  async () => {\r\n    return await fetchQuizCount();\r\n  }\r\n);\r\n\r\nexport const getSimplifiedQuizzes = createAsyncThunk(\r\n  \"browse/getSimplifiedQuizzes\",\r\n  async (pageSize, { getState }) => {\r\n    return await fetchSimplifiedQuizzes(\r\n      sGetCurrentPage(getState()) - 1,\r\n      pageSize\r\n    );\r\n  }\r\n);\r\n\r\nconst browseSlice = createSlice({\r\n  name: \"browse\",\r\n  initialState,\r\n  reducers: {\r\n    reset(state, action) {\r\n      return { ...initialState };\r\n    },\r\n\r\n    setCurrentPage(state, action) {\r\n      state.currentPage = action.payload;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(getQuizCount.pending, (state, action) => {\r\n        state.quizCountRequestStatus = \"pending\";\r\n      })\r\n      .addCase(getQuizCount.fulfilled, (state, action) => {\r\n        state.quizCountRequestStatus = \"fulfilled\";\r\n        state.quizCount = action.payload;\r\n      })\r\n      .addCase(getQuizCount.rejected, (state, action) => {\r\n        state.quizCountRequestStatus = \"rejected\";\r\n      })\r\n      .addCase(getSimplifiedQuizzes.pending, (state, action) => {\r\n        state.simplifiedQuizzesRequestStatus = \"pending\";\r\n      })\r\n      .addCase(getSimplifiedQuizzes.fulfilled, (state, action) => {\r\n        state.simplifiedQuizzesRequestStatus = \"fulfilled\";\r\n        state.simplifiedQuizzes = action.payload;\r\n      })\r\n      .addCase(getSimplifiedQuizzes.rejected, (state, action) => {\r\n        state.simplifiedQuizzesRequestStatus = \"rejected\";\r\n      });\r\n  },\r\n});\r\n\r\nexport const { reset, setCurrentPage } = browseSlice.actions;\r\n\r\nexport default browseSlice.reducer;\r\n","import { Pagination } from \"react-bootstrap\";\r\n\r\nexport const getPagesToGenerate = (\r\n  totalPages,\r\n  currentPage,\r\n  pageChangeCallback\r\n) => {\r\n  let pagesToGenerate = [];\r\n  if (totalPages <= 5) {\r\n    for (let counter = 1; counter < totalPages + 1; counter++) {\r\n      pagesToGenerate.push(counter);\r\n    }\r\n  } else {\r\n    for (let counter = currentPage - 2; counter < currentPage + 3; counter++) {\r\n      if (counter > 0 && counter <= totalPages) {\r\n        pagesToGenerate.push(counter);\r\n      }\r\n    }\r\n  }\r\n  return pagesToGenerate;\r\n};\r\n\r\nexport const generatePages = (\r\n  totalPages,\r\n  currentPage,\r\n  pageChangeCallback,\r\n  pagesToGenerate\r\n) => {\r\n  return pagesToGenerate.map((index) => (\r\n    <Pagination.Item\r\n      key={index}\r\n      active={index == currentPage}\r\n      onClick={() => pageChangeCallback(index)}\r\n    >\r\n      {index}\r\n    </Pagination.Item>\r\n  ));\r\n};\r\n","import { getPagesToGenerate, generatePages } from \"../pages.js\";\r\nimport { Pagination } from \"react-bootstrap\";\r\n\r\nfunction generateMinimalPages(props) {\r\n  let { totalPages, currentPage, pageChangeCallback } = props;\r\n  return generatePages(\r\n    totalPages,\r\n    currentPage,\r\n    pageChangeCallback,\r\n    getPagesToGenerate(totalPages, currentPage, pageChangeCallback)\r\n  );\r\n}\r\n\r\nexport default function MinimalPagination(props) {\r\n  return <Pagination>{generateMinimalPages(props)}</Pagination>;\r\n}\r\n","import { getPagesToGenerate, generatePages } from \"../pages.js\";\r\nimport { Pagination } from \"react-bootstrap\";\r\n\r\nfunction generatePrevPagination(props) {\r\n  let { currentPage, pageChangeCallback } = props;\r\n\r\n  let newPageValue = currentPage - 1;\r\n  if (newPageValue <= 1) {\r\n    newPageValue = 1;\r\n  }\r\n  return <Pagination.Prev onClick={() => pageChangeCallback(newPageValue)} />;\r\n}\r\n\r\nfunction generateCollapsedPages(props) {\r\n  let { totalPages, currentPage, pageChangeCallback } = props;\r\n\r\n  return generatePages(\r\n    totalPages,\r\n    currentPage,\r\n    pageChangeCallback,\r\n    getPagesToGenerate(totalPages, currentPage, pageChangeCallback)\r\n  );\r\n}\r\n\r\nfunction generateNextPagination(props) {\r\n  let { totalPages, currentPage, pageChangeCallback } = props;\r\n\r\n  let newPageValue = currentPage + 1;\r\n  if (newPageValue >= totalPages) {\r\n    newPageValue = totalPages;\r\n  }\r\n  return <Pagination.Next onClick={() => pageChangeCallback(newPageValue)} />;\r\n}\r\n\r\nexport default function CollapsedPagination(props) {\r\n  return (\r\n    <Pagination>\r\n      {generatePrevPagination(props)}\r\n      {generateCollapsedPages(props)}\r\n      {generateNextPagination(props)}\r\n    </Pagination>\r\n  );\r\n}\r\n","import { getPagesToGenerate, generatePages } from \"../pages.js\";\r\nimport { Pagination } from \"react-bootstrap\";\r\n\r\nfunction shouldGenerateLeftEllipsis(totalPages, currentPage) {\r\n  return currentPage > 3;\r\n}\r\n\r\nfunction shouldGenerateRightEllipsis(totalPages, currentPage) {\r\n  return currentPage < totalPages - 2;\r\n}\r\n\r\nfunction getLeftEllipsisPageValue(totalPages, currentPage) {\r\n  let pageValue = currentPage - 4;\r\n  if (pageValue <= 1) {\r\n    return 1;\r\n  } else {\r\n    return pageValue;\r\n  }\r\n}\r\n\r\nfunction getRightEllipsisPageValue(totalPages, currentPage) {\r\n  let pageValue = currentPage + 4;\r\n  if (pageValue >= totalPages) {\r\n    return totalPages;\r\n  } else {\r\n    return pageValue;\r\n  }\r\n}\r\n\r\nfunction generateFirstPagination(props) {\r\n  let { pageChangeCallback } = props;\r\n\r\n  return <Pagination.First onClick={() => pageChangeCallback(1)} />;\r\n}\r\n\r\nfunction generatePrevPagination(props) {\r\n  let { currentPage, pageChangeCallback } = props;\r\n\r\n  let newPageValue = currentPage - 1;\r\n  if (newPageValue <= 1) {\r\n    newPageValue = 1;\r\n  }\r\n  return <Pagination.Prev onClick={() => pageChangeCallback(newPageValue)} />;\r\n}\r\n\r\nfunction generateLeftEllipse(props) {\r\n  let { totalPages, currentPage, pageChangeCallback } = props;\r\n\r\n  return (\r\n    shouldGenerateLeftEllipsis(totalPages, currentPage) && (\r\n      <Pagination.Ellipsis\r\n        onClick={() =>\r\n          pageChangeCallback(getLeftEllipsisPageValue(totalPages, currentPage))\r\n        }\r\n      />\r\n    )\r\n  );\r\n}\r\n\r\nfunction generateExpandedPages(props) {\r\n  let { totalPages, currentPage, pageChangeCallback } = props;\r\n  let pagesToGenerate = getPagesToGenerate(totalPages, currentPage);\r\n  pagesToGenerate.shift();\r\n  pagesToGenerate.pop();\r\n  return generatePages(\r\n    totalPages,\r\n    currentPage,\r\n    pageChangeCallback,\r\n    pagesToGenerate\r\n  );\r\n}\r\n\r\nfunction generateRightEllipse(props) {\r\n  let { totalPages, currentPage, pageChangeCallback } = props;\r\n\r\n  return (\r\n    shouldGenerateRightEllipsis(totalPages, currentPage) && (\r\n      <Pagination.Ellipsis\r\n        onClick={() =>\r\n          pageChangeCallback(getRightEllipsisPageValue(totalPages, currentPage))\r\n        }\r\n      />\r\n    )\r\n  );\r\n}\r\n\r\nfunction generateNextPagination(props) {\r\n  let { totalPages, currentPage, pageChangeCallback } = props;\r\n\r\n  let newPageValue = currentPage + 1;\r\n  if (newPageValue >= totalPages) {\r\n    newPageValue = totalPages;\r\n  }\r\n  return <Pagination.Next onClick={() => pageChangeCallback(newPageValue)} />;\r\n}\r\n\r\nfunction generateLastPagination(props) {\r\n  let { totalPages, pageChangeCallback } = props;\r\n\r\n  return <Pagination.Last onClick={() => pageChangeCallback(totalPages)} />;\r\n}\r\n\r\nexport default function ExpandedPagination(props) {\r\n  let { totalPages, currentPage, pageChangeCallback } = props;\r\n\r\n  return (\r\n    <Pagination>\r\n      {generateFirstPagination(props)}\r\n      {generatePrevPagination(props)}\r\n      <Pagination.Item\r\n        active={1 === currentPage}\r\n        onClick={() => pageChangeCallback(1)}\r\n      >\r\n        1\r\n      </Pagination.Item>\r\n      {generateLeftEllipse(props)}\r\n      {generateExpandedPages(props)}\r\n      {generateRightEllipse(props)}\r\n      <Pagination.Item\r\n        active={totalPages === currentPage}\r\n        onClick={() => pageChangeCallback(totalPages)}\r\n      >\r\n        {totalPages}\r\n      </Pagination.Item>\r\n      {generateNextPagination(props)}\r\n      {generateLastPagination(props)}\r\n    </Pagination>\r\n  );\r\n}\r\n","import MinimalPagination from \"./components/MinimalPagination\";\r\nimport CollapsedPagination from \"./components/CollapsedPagination\";\r\nimport ExpandedPagination from \"./components/ExpandedPagination\";\r\n\r\nexport default function (props) {\r\n  let { currentPage, totalPages, pageChangeCallback } = props;\r\n\r\n  return (\r\n    <div className=\"paginator d-flex justify-content-center\">\r\n      {totalPages <= 3 ? (\r\n        <MinimalPagination\r\n          currentPage={currentPage}\r\n          totalPages={totalPages}\r\n          pageChangeCallback={pageChangeCallback}\r\n        />\r\n      ) : totalPages <= 5 ? (\r\n        <CollapsedPagination\r\n          currentPage={currentPage}\r\n          totalPages={totalPages}\r\n          pageChangeCallback={pageChangeCallback}\r\n        />\r\n      ) : (\r\n        <ExpandedPagination\r\n          currentPage={currentPage}\r\n          totalPages={totalPages}\r\n          pageChangeCallback={pageChangeCallback}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import { Card, Button } from \"react-bootstrap\";\r\nimport { useSelector } from \"react-redux\";\r\nimport {\r\n  sGetQuizCountRequestStatus,\r\n  sGetSimplifiedQuizzesRequestStatus,\r\n} from \"../../services/browseSlice/selectors.js\";\r\n\r\nexport default function ({ loadResources }) {\r\n  const quizCountRequestStatus = useSelector(sGetQuizCountRequestStatus);\r\n  const simplifiedQuizzesRequestStatus = useSelector(\r\n    sGetSimplifiedQuizzesRequestStatus\r\n  );\r\n\r\n  const resourcesFailedToLoad =\r\n    quizCountRequestStatus == \"rejected\" ||\r\n    simplifiedQuizzesRequestStatus == \"rejected\";\r\n\r\n  return (\r\n    <div className=\"quiz-card h-100\">\r\n      <Card className=\"h-100\">\r\n        <Card.Body>\r\n          <Card.Title>\r\n            {resourcesFailedToLoad ? \"Uh oh...\" : \"Loading...\"}\r\n          </Card.Title>\r\n          <Card.Text>\r\n            {resourcesFailedToLoad\r\n              ? \"We were unable to load the quizzes\"\r\n              : \"We are loading your quizzes!\"}\r\n          </Card.Text>\r\n        </Card.Body>\r\n        <Card.Footer>\r\n          {resourcesFailedToLoad ? (\r\n            <Button variant=\"danger\" onClick={loadResources}>\r\n              Retry\r\n            </Button>\r\n          ) : (\r\n            <Button disabled variant=\"outline-secondary\">\r\n              Please Wait...\r\n            </Button>\r\n          )}\r\n        </Card.Footer>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","import { Card, Button } from \"react-bootstrap\";\r\nimport { LinkContainer } from \"react-router-bootstrap\";\r\n\r\nexport default function ({ quiz }) {\r\n  const quizId = quiz._id;\r\n  const quizTitle = quiz.title;\r\n  const quizTrimmedDescription =\r\n    quiz.description.length > 100\r\n      ? quiz.description.substring(0, 100) + \"...\"\r\n      : quiz.description;\r\n\r\n  return (\r\n    <div className=\"quiz-card h-100\">\r\n      <Card className=\"h-100\">\r\n        <Card.Body>\r\n          <Card.Title>{quizTitle}</Card.Title>\r\n          <Card.Text>{quizTrimmedDescription}</Card.Text>\r\n        </Card.Body>\r\n        <Card.Footer>\r\n          <LinkContainer to={\"/quiz/open/\" + quizId}>\r\n            <Button className=\"mr-2\" variant=\"outline-success\">\r\n              Open\r\n            </Button>\r\n          </LinkContainer>\r\n        </Card.Footer>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","import { useLocation, useHistory } from \"react-router-dom\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  getQuizCount,\r\n  getSimplifiedQuizzes,\r\n  reset,\r\n  setCurrentPage,\r\n} from \"./services/browseSlice\";\r\nimport {\r\n  sGetCurrentPage,\r\n  sGetQuizCountRequestStatus,\r\n  sGetSimplifiedQuizzesRequestStatus,\r\n  sGetRows,\r\n  sGetTotalPages,\r\n} from \"./services/browseSlice/selectors.js\";\r\nimport Paginator from \"../../../../components/Paginator\";\r\nimport LoadingQuizCard from \"./components/LoadingQuizCard\";\r\nimport QuizCard from \"./components/QuizCard\";\r\n\r\nconst cardsPerRow = 3;\r\nconst totalRows = 4;\r\n\r\nfunction useQuery() {\r\n  return new URLSearchParams(useLocation().search);\r\n}\r\n\r\nexport default function () {\r\n  const dispatch = useDispatch();\r\n  const location = useLocation();\r\n  const query = useQuery();\r\n  const history = useHistory();\r\n\r\n  const currentPage = useSelector(sGetCurrentPage);\r\n  const queriedPage = parseInt(query.get(\"page\")) || 1;\r\n  if (queriedPage != currentPage) dispatch(setCurrentPage(queriedPage));\r\n\r\n  const totalPages = useSelector(sGetTotalPages(cardsPerRow, totalRows));\r\n  const rows = useSelector(sGetRows(cardsPerRow, totalRows));\r\n\r\n  const quizCountRequestStatus = useSelector(sGetQuizCountRequestStatus);\r\n  const simplifiedQuizzesRequestStatus = useSelector(\r\n    sGetSimplifiedQuizzesRequestStatus\r\n  );\r\n  const resourcesLoaded =\r\n    quizCountRequestStatus == \"fulfilled\" &&\r\n    simplifiedQuizzesRequestStatus == \"fulfilled\";\r\n\r\n  const loadResources = () => {\r\n    dispatch(getQuizCount());\r\n    dispatch(getSimplifiedQuizzes(cardsPerRow * totalRows));\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadResources();\r\n    return function cleanup() {\r\n      dispatch(reset());\r\n    };\r\n  }, [currentPage]);\r\n\r\n  return (\r\n    <div className=\"quiz-browse\">\r\n      <Container fluid>\r\n        {!resourcesLoaded ? (\r\n          <Row>\r\n            <Col className=\"my-2\">\r\n              <LoadingQuizCard loadResources={loadResources} />\r\n            </Col>\r\n          </Row>\r\n        ) : (\r\n          rows.map((row, rowIndex) => (\r\n            <Row key={rowIndex}>\r\n              {row.map((quiz, quizIndex) => (\r\n                <Col className=\"my-2\" md={12 / cardsPerRow} key={quizIndex}>\r\n                  <QuizCard quiz={quiz} />\r\n                </Col>\r\n              ))}\r\n            </Row>\r\n          ))\r\n        )}\r\n      </Container>\r\n      <Paginator\r\n        totalPages={totalPages}\r\n        currentPage={currentPage}\r\n        pageChangeCallback={(newPage) => {\r\n          query.set(\"page\", newPage);\r\n          history.push(location.pathname + \"?\" + query.toString());\r\n          setCurrentPage(newPage);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","export async function postQuiz(quiz) {\r\n  const requestOptions = {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify(quiz),\r\n  };\r\n\r\n  const response = await fetch(\"/api/quiz/create/postQuiz\", requestOptions);\r\n  const data = await response.json();\r\n  return data;\r\n}\r\n","import Joi from \"joi\";\r\n\r\nconst choiceSchema = Joi.object({\r\n  prompt: Joi.string().trim().min(1).max(200).required(),\r\n  correct: Joi.boolean().required(),\r\n});\r\n\r\nconst questionSchema = Joi.object({\r\n  prompt: Joi.string().trim().min(10).max(200).required(),\r\n  choices: Joi.array()\r\n    .items(choiceSchema)\r\n    .has({\r\n      prompt: Joi.string().trim().min(1).max(200).required(),\r\n      correct: Joi.boolean().valid(false).required(),\r\n    })\r\n    .has({\r\n      prompt: Joi.string().trim().min(1).max(200).required(),\r\n      correct: Joi.boolean().valid(true).required(),\r\n    })\r\n    .required(),\r\n});\r\n\r\nconst quizSchema = Joi.object({\r\n  title: Joi.string().trim().min(10).max(50).required(),\r\n  description: Joi.string().trim().min(10).max(200).required(),\r\n  questions: Joi.array().items(questionSchema).min(2).required(),\r\n});\r\n\r\nexport default quizSchema;\r\n","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { postQuiz } from \"../api.js\";\r\nimport quizSchema from \"../quizSchema\";\r\n\r\nconst initialState = {\r\n  quiz: {\r\n    title: \"\",\r\n    description: \"\",\r\n    questions: [],\r\n  },\r\n  activeQuestionIndex: -1,\r\n  postQuizRequestStatus: \"idle\",\r\n  postedQuizId: \"\",\r\n  validationErrors: [],\r\n};\r\n\r\nexport const postQuizCreateForm = createAsyncThunk(\r\n  \"create/postQuizCreateForm\",\r\n  async (quiz, { dispatch, rejectWithValue }) => {\r\n    const result = quizSchema.validate(quiz, { abortEarly: false });\r\n    if (result.error) return rejectWithValue(result.error.details);\r\n\r\n    const data = await postQuiz(quiz);\r\n    dispatch(resetForm());\r\n    return data;\r\n  }\r\n);\r\n\r\nconst createQuizSlice = createSlice({\r\n  name: \"create\",\r\n  initialState,\r\n  reducers: {\r\n    reset(state, action) {\r\n      return { ...initialState };\r\n    },\r\n\r\n    resetForm(state, action) {\r\n      state.quiz = {\r\n        title: \"\",\r\n        description: \"\",\r\n        questions: [],\r\n      };\r\n    },\r\n\r\n    resetPostQuizRequest(state, action) {\r\n      state.postQuizRequestStatus = \"idle\";\r\n      state.postedQuizId = \"\";\r\n    },\r\n\r\n    setValidationErrors(state, action) {\r\n      state.validationErrors = action.payload;\r\n    },\r\n\r\n    setQuizTitle(state, action) {\r\n      state.quiz.title = action.payload;\r\n    },\r\n\r\n    setQuizDescription(state, action) {\r\n      state.quiz.description = action.payload;\r\n    },\r\n\r\n    addQuestion(state, action) {\r\n      state.quiz.questions.push({\r\n        prompt: \"\",\r\n        choices: [],\r\n      });\r\n    },\r\n\r\n    removeQuestion(state, action) {\r\n      state.quiz.questions.splice(action.payload, 1);\r\n    },\r\n\r\n    setQuestionPrompt: {\r\n      reducer(state, action) {\r\n        const { questionIndex, questionPrompt } = action.payload;\r\n        state.quiz.questions[questionIndex].prompt = questionPrompt;\r\n      },\r\n      prepare(questionIndex, questionPrompt) {\r\n        return {\r\n          payload: { questionIndex, questionPrompt },\r\n        };\r\n      },\r\n    },\r\n\r\n    addChoice(state, action) {\r\n      state.quiz.questions[action.payload].choices.push({\r\n        prompt: \"\",\r\n        correct: false,\r\n      });\r\n    },\r\n\r\n    removeChoice: {\r\n      reducer(state, action) {\r\n        const { questionIndex, choiceIndex } = action.payload;\r\n        state.quiz.questions[questionIndex].choices.splice(choiceIndex, 1);\r\n      },\r\n      prepare(questionIndex, choiceIndex) {\r\n        return {\r\n          payload: { questionIndex, choiceIndex },\r\n        };\r\n      },\r\n    },\r\n\r\n    setChoicePrompt: {\r\n      reducer(state, action) {\r\n        const { questionIndex, choiceIndex, choicePrompt } = action.payload;\r\n        state.quiz.questions[questionIndex].choices[\r\n          choiceIndex\r\n        ].prompt = choicePrompt;\r\n      },\r\n      prepare(questionIndex, choiceIndex, choicePrompt) {\r\n        return {\r\n          payload: { questionIndex, choiceIndex, choicePrompt },\r\n        };\r\n      },\r\n    },\r\n\r\n    setChoiceCorrect: {\r\n      reducer(state, action) {\r\n        const { questionIndex, choiceIndex, choiceCorrect } = action.payload;\r\n        state.quiz.questions[questionIndex].choices[\r\n          choiceIndex\r\n        ].correct = choiceCorrect;\r\n      },\r\n      prepare(questionIndex, choiceIndex, choiceCorrect) {\r\n        return {\r\n          payload: { questionIndex, choiceIndex, choiceCorrect },\r\n        };\r\n      },\r\n    },\r\n\r\n    setActiveQuestionIndex(state, action) {\r\n      state.activeQuestionIndex = action.payload;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(postQuizCreateForm.pending, (state, action) => {\r\n        state.postQuizRequestStatus = \"pending\";\r\n      })\r\n      .addCase(postQuizCreateForm.fulfilled, (state, action) => {\r\n        state.postQuizRequestStatus = \"fulfilled\";\r\n        state.validationErrors = [];\r\n        state.postedQuizId = action.payload._id;\r\n      })\r\n      .addCase(postQuizCreateForm.rejected, (state, action) => {\r\n        state.postQuizRequestStatus = \"rejected\";\r\n        state.validationErrors = action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport const {\r\n  reset,\r\n  resetForm,\r\n  resetPostQuizRequest,\r\n  setValidationErrors,\r\n  setQuizTitle,\r\n  setQuizDescription,\r\n  addQuestion,\r\n  removeQuestion,\r\n  setQuestionPrompt,\r\n  addChoice,\r\n  removeChoice,\r\n  setChoicePrompt,\r\n  setChoiceCorrect,\r\n  setActiveQuestionIndex,\r\n} = createQuizSlice.actions;\r\n\r\nexport default createQuizSlice.reducer;\r\n","export const sGetQuiz = (state) => state.quiz.create.quiz;\r\n\r\nexport const sGetQuizTitle = (state) => sGetQuiz(state).title;\r\n\r\nexport const sGetQuizDescription = (state) => sGetQuiz(state).description;\r\n\r\nexport const sGetQuestions = (state) => sGetQuiz(state).questions;\r\n\r\nexport const sGetQuestion = (questionIndex) => (state) =>\r\n  sGetQuestions(state)[questionIndex];\r\n\r\nexport const sGetQuestionPrompt = (questionIndex) => (state) =>\r\n  sGetQuestion(questionIndex)(state).prompt;\r\n\r\nexport const sGetChoices = (questionIndex) => (state) =>\r\n  sGetQuestion(questionIndex)(state).choices;\r\n\r\nexport const sGetChoice = (questionIndex, choiceIndex) => (state) =>\r\n  sGetChoices(questionIndex)(state)[choiceIndex];\r\n\r\nexport const sGetChoicePrompt = (questionId, choiceIndex) => (state) =>\r\n  sGetChoice(questionId, choiceIndex)(state).prompt;\r\n\r\nexport const sGetChoiceCorrect = (questionId, choiceIndex) => (state) =>\r\n  sGetChoice(questionId, choiceIndex)(state).correct;\r\n\r\nexport const sGetActiveQuestionIndex = (state) =>\r\n  state.quiz.create.activeQuestionIndex;\r\n\r\nexport const sGetPostQuizRequestStatus = (state) =>\r\n  state.quiz.create.postQuizRequestStatus;\r\n\r\nexport const sGetPostedQuizId = (state) => state.quiz.create.postedQuizId;\r\n\r\nexport const sGetQuizTitleError = (state) =>\r\n  state.quiz.create.validationErrors.filter(\r\n    ({ path }) => path.length == 1 && path[0] == \"title\"\r\n  )[0]?.message;\r\n\r\nexport const sGetQuizDescriptionError = (state) =>\r\n  state.quiz.create.validationErrors.filter(\r\n    ({ path }) => path.length == 1 && path[0] == \"description\"\r\n  )[0]?.message;\r\n\r\nexport const sGetQuestionsAmountError = (state) =>\r\n  state.quiz.create.validationErrors.filter(\r\n    ({ path }) => path.length == 1 && path[0] == \"questions\"\r\n  )[0]?.message;\r\n\r\nexport const sGetQuestionPromptError = (questionIndex) => (state) =>\r\n  state.quiz.create.validationErrors.filter(\r\n    ({ path }) =>\r\n      path.length == 3 &&\r\n      path[0] == \"questions\" &&\r\n      path[1] == questionIndex &&\r\n      path[2] == \"prompt\"\r\n  )[0]?.message;\r\n\r\nexport const sGetChoiceCriteriaError = (questionIndex) => (state) =>\r\n  state.quiz.create.validationErrors.filter(\r\n    ({ path }) =>\r\n      path.length == 3 &&\r\n      path[0] == \"questions\" &&\r\n      path[1] == questionIndex &&\r\n      path[2] == \"choices\"\r\n  )[0]?.message;\r\n","import { Form, FormGroup } from \"react-bootstrap\";\r\nimport { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  removeChoice,\r\n  setChoicePrompt,\r\n  setChoiceCorrect,\r\n} from \"../../services/createSlice\";\r\nimport {\r\n  sGetChoicePrompt,\r\n  sGetChoiceCorrect,\r\n} from \"../../services/createSlice/selectors.js\";\r\n\r\nexport default function ({\r\n  questionIndex,\r\n  choiceIndex,\r\n  focus,\r\n  setFocusChoiceIndex,\r\n}) {\r\n  const dispatch = useDispatch();\r\n\r\n  const choicePrompt = useSelector(\r\n    sGetChoicePrompt(questionIndex, choiceIndex)\r\n  );\r\n  const choiceCorrect = useSelector(\r\n    sGetChoiceCorrect(questionIndex, choiceIndex)\r\n  );\r\n\r\n  let inputRef = null;\r\n\r\n  useEffect(() => {\r\n    if (focus) {\r\n      setFocusChoiceIndex(-1);\r\n      inputRef.focus();\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div className=\"choice-container\">\r\n      <Form className=\"d-flex align-items-baseline\">\r\n        <Form.Group style={{ flex: 1 }} controlId=\"choice-prompt\">\r\n          <Form.Control\r\n            size=\"sm\"\r\n            autoComplete=\"off\"\r\n            type=\"text\"\r\n            placeholder=\"Choice Prompt\"\r\n            value={choicePrompt}\r\n            ref={(choicePromptInput) => (inputRef = choicePromptInput)}\r\n            onChange={(event) => {\r\n              if (event.target.value == \"\") {\r\n                dispatch(removeChoice(questionIndex, choiceIndex));\r\n                setFocusChoiceIndex(choiceIndex);\r\n              } else {\r\n                dispatch(\r\n                  setChoicePrompt(\r\n                    questionIndex,\r\n                    choiceIndex,\r\n                    event.target.value\r\n                  )\r\n                );\r\n              }\r\n            }}\r\n          />\r\n        </Form.Group>\r\n        <Form.Group className={\"ml-3 d-block\"} controlId=\"correct-choice\">\r\n          <Form.Check\r\n            type=\"checkbox\"\r\n            label=\"Correct\"\r\n            checked={choiceCorrect}\r\n            onChange={(event) =>\r\n              dispatch(\r\n                setChoiceCorrect(\r\n                  questionIndex,\r\n                  choiceIndex,\r\n                  event.target.checked\r\n                )\r\n              )\r\n            }\r\n          />\r\n        </Form.Group>\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n","import { Form } from \"react-bootstrap\";\r\nimport { useEffect } from \"react\";\r\n\r\nexport default function ({ onChangeCallback, focus, setFocusChoiceIndex }) {\r\n  let inputRef = null;\r\n\r\n  useEffect(() => {\r\n    if (focus) {\r\n      setFocusChoiceIndex(-1);\r\n      inputRef.focus();\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div className=\"choice-container\">\r\n      <Form className=\"d-flex align-items-baseline\">\r\n        <Form.Group style={{ flex: 1 }} controlId=\"choice-prompt\">\r\n          <Form.Control\r\n            size=\"sm\"\r\n            autoComplete=\"off\"\r\n            type=\"text\"\r\n            placeholder=\"Choice Prompt\"\r\n            value=\"\"\r\n            ref={(choicePromptInput) => (inputRef = choicePromptInput)}\r\n            onChange={(event) => {\r\n              onChangeCallback(event.target.value);\r\n            }}\r\n          />\r\n        </Form.Group>\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n","import { Form, Button, Collapse } from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  removeQuestion,\r\n  setQuestionPrompt,\r\n  addChoice,\r\n  setChoicePrompt,\r\n  setActiveQuestionIndex,\r\n} from \"../../services/createSlice\";\r\nimport Choice from \"../Choice\";\r\nimport DummyChoice from \"../DummyChoice\";\r\nimport { useState } from \"react\";\r\nimport {\r\n  sGetChoices,\r\n  sGetQuestionPrompt,\r\n  sGetActiveQuestionIndex,\r\n  sGetQuestionPromptError,\r\n  sGetChoiceCriteriaError,\r\n} from \"../../services/createSlice/selectors.js\";\r\n\r\nimport \"./styles.css\";\r\n\r\nexport default function ({ questionIndex }) {\r\n  const dispatch = useDispatch();\r\n\r\n  const [focusChoiceIndex, setFocusChoiceIndex] = useState(-1);\r\n\r\n  const questionPrompt = useSelector(sGetQuestionPrompt(questionIndex));\r\n  const isQuestionActive =\r\n    useSelector(sGetActiveQuestionIndex) == questionIndex;\r\n  const choices = useSelector(sGetChoices(questionIndex));\r\n  const choicesCount = choices.length;\r\n\r\n  const questionPromptError = useSelector(\r\n    sGetQuestionPromptError(questionIndex)\r\n  );\r\n  const choiceCriteriaError = useSelector(\r\n    sGetChoiceCriteriaError(questionIndex)\r\n  );\r\n\r\n  return (\r\n    <div className=\"question-container\">\r\n      <Collapse in={isQuestionActive}>\r\n        <div className=\"question-container-header\">\r\n          <div className=\"py-2 px-3\">\r\n            <Button\r\n              variant=\"danger\"\r\n              onClick={() => dispatch(removeQuestion(questionIndex))}\r\n            >\r\n              <FontAwesomeIcon icon={faTrash} />\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </Collapse>\r\n\r\n      <div\r\n        className=\"question-container-body\"\r\n        onClick={() => dispatch(setActiveQuestionIndex(questionIndex))}\r\n      >\r\n        <Form>\r\n          <Form.Group controlId=\"question-prompt\">\r\n            <Form.Label>Question Prompt</Form.Label>\r\n            <Form.Control\r\n              autoComplete=\"off\"\r\n              type=\"text\"\r\n              placeholder=\"Question Prompt\"\r\n              value={questionPrompt}\r\n              isInvalid={questionPromptError !== undefined}\r\n              onChange={(event) =>\r\n                dispatch(setQuestionPrompt(questionIndex, event.target.value))\r\n              }\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {questionPromptError}\r\n            </Form.Control.Feedback>\r\n          </Form.Group>\r\n        </Form>\r\n        <hr />\r\n\r\n        {choices.map((choice, choiceIndex) => (\r\n          <Choice\r\n            key={choiceIndex}\r\n            questionIndex={questionIndex}\r\n            choiceIndex={choiceIndex}\r\n            focus={choiceIndex == focusChoiceIndex}\r\n            setFocusChoiceIndex={setFocusChoiceIndex}\r\n          />\r\n        ))}\r\n\r\n        <DummyChoice\r\n          onChangeCallback={(value) => {\r\n            dispatch(addChoice(questionIndex));\r\n            dispatch(setChoicePrompt(questionIndex, choicesCount, value));\r\n            setFocusChoiceIndex(choicesCount);\r\n          }}\r\n          focus={choicesCount == focusChoiceIndex}\r\n          setFocusChoiceIndex={setFocusChoiceIndex}\r\n        />\r\n\r\n        <div className=\"invalid-feedback\" style={{ display: \"block\" }}>\r\n          {choiceCriteriaError}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Card, Form, Button } from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\";\r\nimport {\r\n  reset,\r\n  resetPostQuizRequest,\r\n  setQuizTitle,\r\n  setQuizDescription,\r\n  addQuestion,\r\n  postQuizCreateForm,\r\n} from \"./services/createSlice\";\r\nimport {\r\n  sGetQuiz,\r\n  sGetQuizTitle,\r\n  sGetQuizDescription,\r\n  sGetQuestions,\r\n  sGetPostQuizRequestStatus,\r\n  sGetPostedQuizId,\r\n  sGetQuizTitleError,\r\n  sGetQuizDescriptionError,\r\n  sGetQuestionsAmountError,\r\n} from \"./services/createSlice/selectors.js\";\r\nimport PostRequestButton from \"../../../../components/PostRequestButton\";\r\nimport Question from \"./components/Question\";\r\n\r\nimport \"./styles.css\";\r\n\r\nexport default function () {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const quiz = useSelector(sGetQuiz);\r\n  const quizTitle = useSelector(sGetQuizTitle);\r\n  const quizDescription = useSelector(sGetQuizDescription);\r\n  const questions = useSelector(sGetQuestions);\r\n\r\n  const postQuizRequestStatus = useSelector(sGetPostQuizRequestStatus);\r\n  const postedQuizId = useSelector(sGetPostedQuizId);\r\n\r\n  const quizTitleError = useSelector(sGetQuizTitleError);\r\n  const quizDescriptionError = useSelector(sGetQuizDescriptionError);\r\n  const quizQuestionsAmountError = useSelector(sGetQuestionsAmountError);\r\n\r\n  useEffect(() => {\r\n    if (postQuizRequestStatus === \"fulfilled\")\r\n      history.push(`/quiz/open/${postedQuizId}`);\r\n\r\n    return function cleanup() {\r\n      dispatch(resetPostQuizRequest());\r\n    };\r\n  }, [postQuizRequestStatus]);\r\n\r\n  return (\r\n    <div className=\"quiz-create\">\r\n      <Card className=\"m-4\">\r\n        <Card.Header>\r\n          <h3>Create your own Quiz!</h3>\r\n        </Card.Header>\r\n\r\n        <Card.Body>\r\n          <div className=\"quiz-container\">\r\n            <Form>\r\n              <Form.Group controlId=\"quiz-title\">\r\n                <Form.Label>Quiz Title</Form.Label>\r\n                <Form.Control\r\n                  size=\"lg\"\r\n                  autoComplete=\"off\"\r\n                  type=\"text\"\r\n                  placeholder=\"Quiz Title\"\r\n                  value={quizTitle}\r\n                  isInvalid={quizTitleError !== undefined}\r\n                  onChange={(event) =>\r\n                    dispatch(setQuizTitle(event.target.value))\r\n                  }\r\n                />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                  {quizTitleError}\r\n                </Form.Control.Feedback>\r\n              </Form.Group>\r\n              <Form.Group controlId=\"quiz-description\">\r\n                <Form.Label>Quiz Description</Form.Label>\r\n                <Form.Control\r\n                  size=\"lg\"\r\n                  autoComplete=\"off\"\r\n                  type=\"text\"\r\n                  placeholder=\"Quiz Description\"\r\n                  value={quizDescription}\r\n                  isInvalid={quizDescriptionError !== undefined}\r\n                  onChange={(event) =>\r\n                    dispatch(setQuizDescription(event.target.value))\r\n                  }\r\n                />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                  {quizDescriptionError}\r\n                </Form.Control.Feedback>\r\n              </Form.Group>\r\n            </Form>\r\n          </div>\r\n\r\n          {questions.map((question, questionIndex) => (\r\n            <Question key={questionIndex} questionIndex={questionIndex} />\r\n          ))}\r\n\r\n          <Button variant=\"success\" onClick={() => dispatch(addQuestion())}>\r\n            <b className=\"pr-2\">Add Question</b>\r\n            <FontAwesomeIcon icon={faPlus} />\r\n          </Button>\r\n          <div className=\"invalid-feedback\" style={{ display: \"block\" }}>\r\n            {quizQuestionsAmountError}\r\n          </div>\r\n        </Card.Body>\r\n\r\n        <Card.Footer>\r\n          <Button\r\n            className=\"mr-2\"\r\n            variant=\"primary\"\r\n            onClick={() => dispatch(reset())}\r\n          >\r\n            New\r\n          </Button>\r\n\r\n          <PostRequestButton\r\n            initiatePostRequest={() => dispatch(postQuizCreateForm(quiz))}\r\n            postRequestStatus={postQuizRequestStatus}\r\n            idleText=\"Create\"\r\n          />\r\n        </Card.Footer>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","export const sGetSimplifiedQuiz = (state) => state.quiz.open.simplifiedQuiz;\r\n\r\nexport const sGetSimplifiedQuizId = (state) => sGetSimplifiedQuiz(state)._id;\r\n\r\nexport const sGetSimplifiedQuizTitle = (state) =>\r\n  sGetSimplifiedQuiz(state).title;\r\n\r\nexport const sGetSimplifiedQuizDescription = (state) =>\r\n  sGetSimplifiedQuiz(state).description;\r\n\r\nexport const sGetSimplifiedQuizRequestStatus = (state) =>\r\n  state.quiz.open.simplifiedQuizRequestStatus;\r\n","import { Card, Button } from \"react-bootstrap\";\r\nimport { LinkContainer } from \"react-router-bootstrap\";\r\nimport { useSelector } from \"react-redux\";\r\nimport {\r\n  sGetSimplifiedQuizId,\r\n  sGetSimplifiedQuizTitle,\r\n  sGetSimplifiedQuizDescription,\r\n} from \"../services/openSlice/selectors.js\";\r\n\r\nexport default function () {\r\n  const quizId = useSelector(sGetSimplifiedQuizId);\r\n  const quizTitle = useSelector(sGetSimplifiedQuizTitle);\r\n  const quizDescription = useSelector(sGetSimplifiedQuizDescription);\r\n\r\n  return (\r\n    <div className=\"open\">\r\n      <Card className=\"m-4\">\r\n        <Card.Header>\r\n          <h3>{quizTitle}</h3>\r\n        </Card.Header>\r\n        <Card.Body>{quizDescription}</Card.Body>\r\n        <Card.Footer>\r\n          <LinkContainer exact to={\"/quiz/take/\" + quizId}>\r\n            <Button variant=\"success\">Take</Button>\r\n          </LinkContainer>\r\n        </Card.Footer>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","import { Card, Button } from \"react-bootstrap\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { sGetSimplifiedQuizRequestStatus } from \"../services/openSlice/selectors.js\";\r\n\r\nexport default function ({ loadResources }) {\r\n  const simplifiedQuizRequestStatus = useSelector(\r\n    sGetSimplifiedQuizRequestStatus\r\n  );\r\n\r\n  const resourcesFailedToLoad = simplifiedQuizRequestStatus == \"rejected\";\r\n\r\n  return (\r\n    <div className=\"open\">\r\n      <Card className=\"m-4\">\r\n        <Card.Header>\r\n          <h3>{resourcesFailedToLoad ? \"Uh oh...\" : \"Loading...\"}</h3>\r\n        </Card.Header>\r\n        <Card.Body>\r\n          {resourcesFailedToLoad\r\n            ? \"We failed to load the quiz.\"\r\n            : \"We are loading your quiz.\"}\r\n        </Card.Body>\r\n        <Card.Footer>\r\n          {resourcesFailedToLoad ? (\r\n            <Button variant=\"danger\" onClick={loadResources}>\r\n              Retry\r\n            </Button>\r\n          ) : (\r\n            <Button disabled variant=\"secondary\">\r\n              Please Wait\r\n            </Button>\r\n          )}\r\n        </Card.Footer>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","export async function fetchSimplifiedQuiz(quizId) {\r\n  const response = await fetch(`/api/quiz/open/simplifiedQuiz/${quizId}`);\r\n  const data = await response.json();\r\n  return data;\r\n}\r\n","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { fetchSimplifiedQuiz } from \"../api.js\";\r\n\r\nconst initialState = {\r\n  simplifiedQuiz: {},\r\n  simplifiedQuizRequestStatus: \"idle\",\r\n};\r\n\r\nexport const getSimplifiedQuiz = createAsyncThunk(\r\n  \"open/getSimplifiedQuiz\",\r\n  async (quizId) => {\r\n    return await fetchSimplifiedQuiz(quizId);\r\n  }\r\n);\r\n\r\nconst openSlice = createSlice({\r\n  name: \"open\",\r\n  initialState,\r\n  reducers: {\r\n    reset(action, state) {\r\n      return { ...state };\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(getSimplifiedQuiz.pending, (state, action) => {\r\n        state.simplifiedQuizRequestStatus = \"pending\";\r\n      })\r\n      .addCase(getSimplifiedQuiz.fulfilled, (state, action) => {\r\n        state.simplifiedQuizRequestStatus = \"fulfilled\";\r\n        state.simplifiedQuiz = action.payload;\r\n      })\r\n      .addCase(getSimplifiedQuiz.rejected, (state, action) => {\r\n        state.simplifiedQuizRequestStatus = \"rejected\";\r\n      });\r\n  },\r\n});\r\n\r\nexport const { reset } = openSlice.actions;\r\n\r\nexport default openSlice.reducer;\r\n","import { useParams } from \"react-router\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport QuizCard from \"./components/QuizCard\";\r\nimport LoadingQuizCard from \"./components/LoadingQuizCard\";\r\nimport {\r\n  sGetSimplifiedQuizRequestStatus,\r\n  sGetSimplifiedQuiz,\r\n} from \"./services/openSlice/selectors.js\";\r\nimport { reset, getSimplifiedQuiz } from \"./services/openSlice\";\r\nimport { useEffect } from \"react\";\r\n\r\nexport default function () {\r\n  const dispatch = useDispatch();\r\n  const params = useParams();\r\n  const quizId = params.id;\r\n\r\n  const simplifiedQuiz = useSelector(sGetSimplifiedQuiz);\r\n  const simplifiedQuizRequestStatus = useSelector(\r\n    sGetSimplifiedQuizRequestStatus\r\n  );\r\n\r\n  const resourcesLoaded = simplifiedQuizRequestStatus == \"fulfilled\";\r\n\r\n  const loadResources = () => {\r\n    dispatch(getSimplifiedQuiz(quizId));\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadResources();\r\n    return function cleanup() {\r\n      dispatch(reset());\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"quiz-open\">\r\n      {resourcesLoaded ? (\r\n        <QuizCard simplifiedQuiz={simplifiedQuiz} />\r\n      ) : (\r\n        <LoadingQuizCard loadResources={loadResources} />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","export async function fetchUnrevealedQuiz(quizId) {\r\n  const response = await fetch(`/api/quiz/take/unrevealedQuiz/${quizId}`);\r\n  const data = await response.json();\r\n  return data;\r\n}\r\n\r\nexport async function fetchCorrectChoices(quizId, questionId) {\r\n  const response = await fetch(\r\n    `/api/quiz/take/correctChoices/${quizId}/${questionId}`\r\n  );\r\n  const data = await response.json();\r\n  return data;\r\n}\r\n","export const sGetQuizRequestStatus = (state) => {\r\n  return state.quiz.take.quizRequestStatus;\r\n};\r\n\r\nexport const sGetQuiz = (state) => {\r\n  return state.quiz.take.quiz;\r\n};\r\n\r\nexport const sGetQuizId = (state) => {\r\n  return sGetQuiz(state)._id;\r\n};\r\n\r\nexport const sGetQuizTitle = (state) => {\r\n  return sGetQuiz(state).title;\r\n};\r\n\r\nexport const sGetQuizDescription = (state) => {\r\n  return sGetQuiz(state).description;\r\n};\r\n\r\nexport const sGetQuestions = (state) => {\r\n  return sGetQuiz(state).questions;\r\n};\r\n\r\nexport const sGetQuestionCount = (state) => {\r\n  return sGetQuestions(state).length;\r\n};\r\n\r\nexport const sGetQuestion = (questionId) => (state) => {\r\n  return sGetQuestions(state).filter(\r\n    (question) => question._id == questionId\r\n  )[0];\r\n};\r\n\r\nexport const sGetChoice = (questionId, choiceId) => (state) => {\r\n  return sGetQuestion(questionId)(state).choices.filter(\r\n    (choice) => choice._id == choiceId\r\n  )[0];\r\n};\r\n\r\nexport const sGetChoicePrompt = (questionId, choiceId) => (state) => {\r\n  return sGetChoice(questionId, choiceId)(state).prompt;\r\n};\r\n\r\nexport const sGetCorrectChoices = (state) => {\r\n  return state.quiz.take.correctChoices;\r\n};\r\n\r\nexport const sGetCorrectChoicesRequestStatus = (state) => {\r\n  return state.quiz.take.correctChoicesRequestStatus;\r\n};\r\n\r\nexport const sGetCurrentQuestionId = (state) => {\r\n  return state.quiz.take.currentQuestionId;\r\n};\r\n\r\nexport const sGetSelectedChoiceId = (state) => {\r\n  return state.quiz.take.selectedChoiceId;\r\n};\r\n\r\nexport const sGetSelectedChoiceCorrect = (state) => {\r\n  return state.quiz.take.selectedChoiceCorrect;\r\n};\r\n\r\nexport const sGetTotalCorrectQuestions = (state) => {\r\n  return state.quiz.take.totalCorrectQuestions;\r\n};\r\n\r\nexport const sGetTotalWrongQuestions = (state) => {\r\n  return state.quiz.take.totalWrongQuestions;\r\n};\r\n","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { fetchUnrevealedQuiz, fetchCorrectChoices } from \"../api.js\";\r\nimport {\r\n  sGetSelectedChoiceId,\r\n  sGetTotalCorrectQuestions,\r\n  sGetTotalWrongQuestions,\r\n} from \"./selectors.js\";\r\n\r\nexport const getUnrevealedQuiz = createAsyncThunk(\r\n  \"quizTake/getUnrevealedQuiz\",\r\n  async (quizId) => {\r\n    return await fetchUnrevealedQuiz(quizId);\r\n  }\r\n);\r\n\r\nexport const getCorrectChoices = createAsyncThunk(\r\n  \"take/getCorrectChoices\",\r\n  async ({ quizId, questionId }, { dispatch, getState }) => {\r\n    const correctChoices = await fetchCorrectChoices(quizId, questionId);\r\n    const selectedChoiceId = sGetSelectedChoiceId(getState());\r\n    const isCorrect = correctChoices.some((id) => id == selectedChoiceId);\r\n\r\n    const totalCorrectQuestions = sGetTotalCorrectQuestions(getState());\r\n    const totalWrongQuestions = sGetTotalWrongQuestions(getState());\r\n\r\n    dispatch(setSelectedChoiceCorrect(isCorrect));\r\n    if (isCorrect)\r\n      dispatch(setTotalCorrectQuestions(totalCorrectQuestions + 1));\r\n    else dispatch(setTotalWrongQuestions(totalWrongQuestions + 1));\r\n\r\n    return correctChoices;\r\n  }\r\n);\r\n\r\nconst initialState = {\r\n  quiz: {},\r\n  quizRequestStatus: \"idle\",\r\n  correctChoices: [],\r\n  correctChoicesRequestStatus: \"idle\",\r\n  currentQuestionId: 1,\r\n  selectedChoiceId: -1,\r\n  selectedChoiceCorrect: false,\r\n  totalCorrectQuestions: 0,\r\n  totalWrongQuestions: 0,\r\n  quizFinished: false,\r\n};\r\n\r\nconst takeSlice = createSlice({\r\n  name: \"take\",\r\n  initialState,\r\n  reducers: {\r\n    reset(state, action) {\r\n      return { ...initialState };\r\n    },\r\n\r\n    clearCorrectChoices(state, action) {\r\n      state.correctChoices = [];\r\n      state.correctChoicesRequestStatus = \"idle\";\r\n    },\r\n\r\n    incrementCurrentQuestionId(state, action) {\r\n      state.currentQuestionId++;\r\n    },\r\n\r\n    setSelectedChoiceId(state, action) {\r\n      state.selectedChoiceId = action.payload;\r\n      state.selectedChoiceCorrect = false;\r\n    },\r\n\r\n    setSelectedChoiceCorrect(state, action) {\r\n      state.selectedChoiceCorrect = action.payload;\r\n    },\r\n\r\n    setTotalCorrectQuestions(state, action) {\r\n      state.totalCorrectQuestions = action.payload;\r\n    },\r\n\r\n    setTotalWrongQuestions(state, action) {\r\n      state.totalWrongQuestions = action.payload;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(getUnrevealedQuiz.pending, (state, action) => {\r\n        state.quizRequestStatus = \"pending\";\r\n      })\r\n      .addCase(getUnrevealedQuiz.fulfilled, (state, action) => {\r\n        state.quizRequestStatus = \"fulfilled\";\r\n        state.quiz = action.payload;\r\n      })\r\n      .addCase(getUnrevealedQuiz.rejected, (state, action) => {\r\n        state.quizRequestStatus = \"rejected\";\r\n      })\r\n      .addCase(getCorrectChoices.pending, (state, action) => {\r\n        state.correctChoicesRequestStatus = \"pending\";\r\n      })\r\n      .addCase(getCorrectChoices.fulfilled, (state, action) => {\r\n        state.correctChoicesRequestStatus = \"fulfilled\";\r\n        state.correctChoices = action.payload;\r\n      })\r\n      .addCase(getCorrectChoices.rejected, (state, action) => {\r\n        state.correctChoicesRequestStatus = \"rejected\";\r\n      });\r\n  },\r\n});\r\n\r\nexport const {\r\n  reset,\r\n  clearCorrectChoices,\r\n  incrementCurrentQuestionId,\r\n  setSelectedChoiceId,\r\n  setSelectedChoiceCorrect,\r\n  setTotalCorrectQuestions,\r\n  setTotalWrongQuestions,\r\n} = takeSlice.actions;\r\n\r\nexport default takeSlice.reducer;\r\n","import { Card, Button } from \"react-bootstrap\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { sGetQuizRequestStatus } from \"../../services/takeSlice/selectors.js\";\r\n\r\nexport default function ({ loadQuiz }) {\r\n  const quizRequestStatus = useSelector(sGetQuizRequestStatus);\r\n  const quizFailedToLoad = quizRequestStatus == \"rejected\";\r\n\r\n  return (\r\n    <Card className=\"m-4\">\r\n      <Card.Header>{quizFailedToLoad ? \"Uh oh...\" : \"Loading...\"}</Card.Header>\r\n      <Card.Body>\r\n        {quizFailedToLoad\r\n          ? \"We were unable to load the quiz\"\r\n          : \"We are loading your quiz!\"}\r\n      </Card.Body>\r\n      <Card.Footer>\r\n        {quizFailedToLoad ? (\r\n          <Button variant=\"danger\" onClick={loadQuiz}>\r\n            Retry\r\n          </Button>\r\n        ) : (\r\n          <Button disabled variant=\"outline-secondary\">\r\n            Please Wait...\r\n          </Button>\r\n        )}\r\n      </Card.Footer>\r\n    </Card>\r\n  );\r\n}\r\n","import { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  sGetQuizId,\r\n  sGetCurrentQuestionId,\r\n  sGetChoice,\r\n  sGetSelectedChoiceId,\r\n  sGetCorrectChoicesRequestStatus,\r\n  sGetSelectedChoiceCorrect,\r\n} from \"../../services/takeSlice/selectors.js\";\r\nimport {\r\n  setSelectedChoiceId,\r\n  getCorrectChoices,\r\n} from \"../../services/takeSlice\";\r\n\r\nimport \"./styles.css\";\r\n\r\nexport default function ({ choiceId }) {\r\n  const dispatch = useDispatch();\r\n\r\n  const quizId = useSelector(sGetQuizId);\r\n  const currentQuestionId = useSelector(sGetCurrentQuestionId);\r\n  const choice = useSelector(sGetChoice(currentQuestionId, choiceId));\r\n  const selectedChoiceId = useSelector(sGetSelectedChoiceId);\r\n  const selectedChoiceCorrect = useSelector(sGetSelectedChoiceCorrect);\r\n  const correctChoicesRequestStatus = useSelector(\r\n    sGetCorrectChoicesRequestStatus\r\n  );\r\n\r\n  const isFetchingCorrectChoices = correctChoicesRequestStatus == \"pending\";\r\n  const isSelected = choiceId == selectedChoiceId;\r\n  const isCorrect = selectedChoiceCorrect;\r\n\r\n  let choiceClass;\r\n  if (isSelected) {\r\n    if (isFetchingCorrectChoices) {\r\n      choiceClass = \"choice-pending\";\r\n    } else {\r\n      if (isCorrect) {\r\n        choiceClass = \"choice-correct\";\r\n      } else {\r\n        choiceClass = \"choice-incorrect\";\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={\"choice p-2 m-2 \" + choiceClass}\r\n      onClick={() => {\r\n        if (selectedChoiceId == -1) {\r\n          dispatch(setSelectedChoiceId(choiceId));\r\n          dispatch(\r\n            getCorrectChoices({\r\n              quizId,\r\n              questionId: currentQuestionId,\r\n            })\r\n          );\r\n        }\r\n      }}\r\n    >\r\n      {choice.prompt}\r\n    </div>\r\n  );\r\n}\r\n","import { Card, Button, ProgressBar } from \"react-bootstrap\";\r\nimport { LinkContainer } from \"react-router-bootstrap\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  sGetQuizId,\r\n  sGetQuizTitle,\r\n  sGetQuestionCount,\r\n  sGetTotalCorrectQuestions,\r\n  sGetTotalWrongQuestions,\r\n  sGetCurrentQuestionId,\r\n  sGetQuestion,\r\n} from \"../../services/takeSlice/selectors.js\";\r\nimport {\r\n  incrementCurrentQuestionId,\r\n  setSelectedChoiceId,\r\n} from \"../../services/takeSlice\";\r\nimport Choice from \"../Choice\";\r\n\r\nexport default function () {\r\n  const dispatch = useDispatch();\r\n\r\n  const quizId = useSelector(sGetQuizId);\r\n  const quizTitle = useSelector(sGetQuizTitle);\r\n  const totalQuestions = useSelector(sGetQuestionCount);\r\n  const totalCorrectQuestions = useSelector(sGetTotalCorrectQuestions);\r\n  const totalWrongQuestions = useSelector(sGetTotalWrongQuestions);\r\n\r\n  const currentQuestionId = useSelector(sGetCurrentQuestionId);\r\n  const currentQuestion = useSelector(sGetQuestion(currentQuestionId));\r\n  const { prompt, choices } = currentQuestion;\r\n\r\n  const isLastQuestion = currentQuestionId == totalQuestions;\r\n\r\n  return (\r\n    <Card className=\"m-4\">\r\n      <Card.Header>{quizTitle}</Card.Header>\r\n      <Card.Body>\r\n        <h5>{prompt}</h5>\r\n        <hr />\r\n        {choices.map((choice, choiceIndex) => (\r\n          <Choice key={choiceIndex} choiceId={choice._id} />\r\n        ))}\r\n      </Card.Body>\r\n      <Card.Footer>\r\n        <div className=\"d-flex align-items-baseline\">\r\n          <ProgressBar style={{ flex: 1 }}>\r\n            <ProgressBar\r\n              variant=\"success\"\r\n              now={(100 * totalCorrectQuestions) / totalQuestions}\r\n              key={1}\r\n            />\r\n            <ProgressBar\r\n              variant=\"danger\"\r\n              now={(100 * totalWrongQuestions) / totalQuestions}\r\n              key={2}\r\n            />\r\n          </ProgressBar>\r\n\r\n          <LinkContainer exact to={\"/quiz/open/\" + quizId}>\r\n            <Button className=\"mx-3\" variant=\"danger\">\r\n              Quit\r\n            </Button>\r\n          </LinkContainer>\r\n\r\n          {isLastQuestion ? (\r\n            <LinkContainer exact to=\"/quiz/browse\">\r\n              <Button variant=\"success\">Finish</Button>\r\n            </LinkContainer>\r\n          ) : (\r\n            <Button\r\n              variant=\"success\"\r\n              onClick={() => {\r\n                dispatch(incrementCurrentQuestionId());\r\n                dispatch(setSelectedChoiceId(-1));\r\n              }}\r\n            >\r\n              Next\r\n            </Button>\r\n          )}\r\n        </div>\r\n      </Card.Footer>\r\n    </Card>\r\n  );\r\n}\r\n","import { useParams } from \"react-router\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useEffect } from \"react\";\r\nimport { getUnrevealedQuiz, reset } from \"./services/takeSlice\";\r\nimport { sGetQuizRequestStatus } from \"./services/takeSlice/selectors.js\";\r\nimport LoadingQuizCard from \"./components/LoadingQuizCard\";\r\nimport QuestionCard from \"./components/QuestionCard\";\r\n\r\nexport default function () {\r\n  const params = useParams();\r\n  const quizId = params.id;\r\n  const dispatch = useDispatch();\r\n\r\n  const quizRequestStatus = useSelector(sGetQuizRequestStatus);\r\n  const quizLoaded = quizRequestStatus == \"fulfilled\";\r\n\r\n  const loadQuiz = () => {\r\n    dispatch(getUnrevealedQuiz(quizId));\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadQuiz();\r\n\r\n    return function cleanup() {\r\n      dispatch(reset());\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"quiz-take\">\r\n      {quizLoaded ? <QuestionCard /> : <LoadingQuizCard loadQuiz={loadQuiz} />}\r\n    </div>\r\n  );\r\n}\r\n","export async function postLogin(login) {\r\n  try {\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(login),\r\n    };\r\n\r\n    const response = await fetch(\"/api/authentication/login\", requestOptions);\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    return null;\r\n  }\r\n}\r\n","import Joi from \"joi\";\r\n\r\nconst userSchema = Joi.object({\r\n  username: Joi.string().trim().alphanum().min(3).max(20).required(),\r\n  password: Joi.string().min(5).max(100),\r\n});\r\n\r\nexport default userSchema;\r\n","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { postLogin } from \"../api.js\";\r\nimport userSchema from \"../../../../services/userSchema.js\";\r\nimport { getAuthenticated } from \"../../../../../../services/authenticatedSlice\";\r\n\r\nconst initialState = {\r\n  username: \"\",\r\n  password: \"\",\r\n  postLoginRequestStatus: \"idle\",\r\n  validationErrors: [],\r\n};\r\n\r\nexport const postLoginForm = createAsyncThunk(\r\n  \"login/postLoginForm\",\r\n  async (user, { dispatch, rejectWithValue }) => {\r\n    const result = userSchema.validate(user, { abortEarly: false });\r\n    if (result.error) return rejectWithValue(result.error.details);\r\n\r\n    const data = await postLogin(user);\r\n    if (data.error)\r\n      return rejectWithValue([{ message: data.error, path: [data.field] }]);\r\n    await dispatch(getAuthenticated());\r\n    return data;\r\n  }\r\n);\r\n\r\nconst loginSlice = createSlice({\r\n  name: \"login\",\r\n  initialState,\r\n  reducers: {\r\n    reset(state, action) {\r\n      return { ...initialState };\r\n    },\r\n\r\n    setUsername(state, action) {\r\n      state.username = action.payload;\r\n    },\r\n\r\n    setPassword(state, action) {\r\n      state.password = action.payload;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(postLoginForm.pending, (state, action) => {\r\n        state.postLoginRequestStatus = \"pending\";\r\n      })\r\n      .addCase(postLoginForm.fulfilled, (state, action) => {\r\n        state.postLoginRequestStatus = \"fulfilled\";\r\n        state.validationErrors = [];\r\n      })\r\n      .addCase(postLoginForm.rejected, (state, action) => {\r\n        state.postLoginRequestStatus = \"rejected\";\r\n        state.validationErrors = action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { reset, setUsername, setPassword } = loginSlice.actions;\r\n\r\nexport default loginSlice.reducer;\r\n","export const sGetUsername = (state) => state.authentication.login.username;\r\n\r\nexport const sGetPassword = (state) => state.authentication.login.password;\r\n\r\nexport const sGetUser = (state) => ({\r\n  username: sGetUsername(state),\r\n  password: sGetPassword(state),\r\n});\r\n\r\nexport const sGetPostLoginRequestStatus = (state) =>\r\n  state.authentication.login.postLoginRequestStatus;\r\n\r\nexport const sGetValidationErrors = (state) =>\r\n  state.authentication.login.validationErrors;\r\n\r\nexport const sGetUsernameError = (state) =>\r\n  sGetValidationErrors(state).filter(\r\n    ({ path }) => path.length == 1 && path[0] == \"username\"\r\n  )[0]?.message;\r\n\r\nexport const sGetPasswordError = (state) =>\r\n  sGetValidationErrors(state).filter(\r\n    ({ path }) => path.length == 1 && path[0] == \"password\"\r\n  )[0]?.message;\r\n","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { useEffect } from \"react\";\r\nimport { Card, Form } from \"react-bootstrap\";\r\nimport { Redirect, useLocation } from \"react-router-dom\";\r\nimport PostRequestButton from \"../../../../components/PostRequestButton\";\r\nimport {\r\n  reset,\r\n  postLoginForm,\r\n  setUsername,\r\n  setPassword,\r\n} from \"./services/loginSlice\";\r\nimport {\r\n  sGetUser,\r\n  sGetUsername,\r\n  sGetPassword,\r\n  sGetPostLoginRequestStatus,\r\n  sGetUsernameError,\r\n  sGetPasswordError,\r\n} from \"./services/loginSlice/selectors.js\";\r\n\r\nfunction useQuery() {\r\n  return new URLSearchParams(useLocation().search);\r\n}\r\n\r\nexport default function () {\r\n  const dispatch = useDispatch();\r\n  const query = useQuery();\r\n  const redirectPath = query.get(\"redirect\");\r\n\r\n  const user = useSelector(sGetUser);\r\n  const username = useSelector(sGetUsername);\r\n  const password = useSelector(sGetPassword);\r\n  const postLoginRequestStatus = useSelector(sGetPostLoginRequestStatus);\r\n\r\n  const usernameError = useSelector(sGetUsernameError);\r\n  const passwordError = useSelector(sGetPasswordError);\r\n\r\n  useEffect(() => {\r\n    return function cleanup() {\r\n      dispatch(reset());\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"authentication-login\">\r\n      <Card className=\"m-4\">\r\n        <Card.Header>\r\n          <h4>Account Login</h4>\r\n        </Card.Header>\r\n\r\n        <Card.Body>\r\n          <Form>\r\n            <Form.Group controlId=\"username\">\r\n              <Form.Label>Username</Form.Label>\r\n              <Form.Control\r\n                autoComplete=\"on\"\r\n                type=\"text\"\r\n                placeholder=\"Username\"\r\n                value={username}\r\n                isInvalid={usernameError !== undefined}\r\n                onChange={(event) => dispatch(setUsername(event.target.value))}\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {usernameError}\r\n              </Form.Control.Feedback>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"password\">\r\n              <Form.Label>Password</Form.Label>\r\n              <Form.Control\r\n                autoComplete=\"on\"\r\n                type=\"password\"\r\n                placeholder=\"Password\"\r\n                value={password}\r\n                isInvalid={passwordError !== undefined}\r\n                onChange={(event) => dispatch(setPassword(event.target.value))}\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {passwordError}\r\n              </Form.Control.Feedback>\r\n            </Form.Group>\r\n          </Form>\r\n        </Card.Body>\r\n\r\n        <Card.Footer className=\"d-flex\">\r\n          {postLoginRequestStatus === \"fulfilled\" ? (\r\n            <Redirect\r\n              to={\r\n                Boolean(redirectPath) ? redirectPath : \"/authentication/account\"\r\n              }\r\n            />\r\n          ) : (\r\n            <PostRequestButton\r\n              className=\"ml-auto\"\r\n              initiatePostRequest={() => dispatch(postLoginForm(user))}\r\n              postRequestStatus={postLoginRequestStatus}\r\n              idleText=\"Login\"\r\n            />\r\n          )}\r\n        </Card.Footer>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","export async function postRegister(register) {\r\n  try {\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(register),\r\n    };\r\n\r\n    const response = await fetch(\r\n      \"/api/authentication/register\",\r\n      requestOptions\r\n    );\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    return null;\r\n  }\r\n}\r\n","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { postRegister } from \"../api.js\";\r\nimport userSchema from \"../../../../services/userSchema.js\";\r\n\r\nconst initialState = {\r\n  username: \"\",\r\n  password: \"\",\r\n  postRegisterRequestStatus: \"idle\",\r\n  validationErrors: [],\r\n};\r\n\r\nexport const postRegisterForm = createAsyncThunk(\r\n  \"register/postRegisterForm\",\r\n  async (user, { rejectWithValue }) => {\r\n    const result = userSchema.validate(user, { abortEarly: false });\r\n    if (result.error) return rejectWithValue(result.error.details);\r\n\r\n    const data = await postRegister(user);\r\n    if (data.error)\r\n      return rejectWithValue([{ message: data.error, path: [data.field] }]);\r\n\r\n    return data;\r\n  }\r\n);\r\n\r\nconst registerSlice = createSlice({\r\n  name: \"register\",\r\n  initialState,\r\n  reducers: {\r\n    reset(state, action) {\r\n      return { ...initialState };\r\n    },\r\n\r\n    setUsername(state, action) {\r\n      state.username = action.payload;\r\n    },\r\n\r\n    setPassword(state, action) {\r\n      state.password = action.payload;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(postRegisterForm.pending, (state, action) => {\r\n        state.postRegisterRequestStatus = \"pending\";\r\n      })\r\n      .addCase(postRegisterForm.fulfilled, (state, action) => {\r\n        state.postRegisterRequestStatus = \"fulfilled\";\r\n        state.validationErrors = [];\r\n      })\r\n      .addCase(postRegisterForm.rejected, (state, action) => {\r\n        state.postRegisterRequestStatus = \"rejected\";\r\n        state.validationErrors = action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { reset, setUsername, setPassword } = registerSlice.actions;\r\n\r\nexport default registerSlice.reducer;\r\n","export const sGetUsername = (state) => state.authentication.register.username;\r\n\r\nexport const sGetPassword = (state) => state.authentication.register.password;\r\n\r\nexport const sGetUser = (state) => ({\r\n  username: sGetUsername(state),\r\n  password: sGetPassword(state),\r\n});\r\n\r\nexport const sGetPostRegisterRequestStatus = (state) =>\r\n  state.authentication.register.postRegisterRequestStatus;\r\n\r\nexport const sGetValidationErrors = (state) =>\r\n  state.authentication.register.validationErrors;\r\n\r\nexport const sGetUsernameError = (state) =>\r\n  sGetValidationErrors(state).filter(\r\n    ({ path }) => path.length == 1 && path[0] == \"username\"\r\n  )[0]?.message;\r\n\r\nexport const sGetPasswordError = (state) =>\r\n  sGetValidationErrors(state).filter(\r\n    ({ path }) => path.length == 1 && path[0] == \"password\"\r\n  )[0]?.message;\r\n","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { useEffect } from \"react\";\r\nimport { Card, Form } from \"react-bootstrap\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport PostRequestButton from \"../../../../components/PostRequestButton\";\r\nimport {\r\n  reset,\r\n  postRegisterForm,\r\n  setUsername,\r\n  setPassword,\r\n} from \"./services/registerSlice\";\r\nimport {\r\n  sGetUser,\r\n  sGetUsername,\r\n  sGetPassword,\r\n  sGetPostRegisterRequestStatus,\r\n  sGetUsernameError,\r\n  sGetPasswordError,\r\n} from \"./services/registerSlice/selectors.js\";\r\n\r\nexport default function () {\r\n  const dispatch = useDispatch();\r\n\r\n  const user = useSelector(sGetUser);\r\n  const username = useSelector(sGetUsername);\r\n  const password = useSelector(sGetPassword);\r\n  const postRegisterRequestStatus = useSelector(sGetPostRegisterRequestStatus);\r\n\r\n  const usernameError = useSelector(sGetUsernameError);\r\n  const passwordError = useSelector(sGetPasswordError);\r\n\r\n  useEffect(() => {\r\n    return function cleanup() {\r\n      dispatch(reset());\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"authentication-register\">\r\n      <Card className=\"m-4\">\r\n        <Card.Header>\r\n          <h4>Account Registration</h4>\r\n        </Card.Header>\r\n\r\n        <Card.Body>\r\n          <Form>\r\n            <Form.Group controlId=\"username\">\r\n              <Form.Label>Username</Form.Label>\r\n              <Form.Control\r\n                autoComplete=\"off\"\r\n                type=\"text\"\r\n                placeholder=\"Username\"\r\n                value={username}\r\n                isInvalid={usernameError !== undefined}\r\n                onChange={(event) => dispatch(setUsername(event.target.value))}\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {usernameError}\r\n              </Form.Control.Feedback>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"password\">\r\n              <Form.Label>Password</Form.Label>\r\n              <Form.Control\r\n                autoComplete=\"off\"\r\n                type=\"password\"\r\n                placeholder=\"Password\"\r\n                value={password}\r\n                isInvalid={passwordError !== undefined}\r\n                onChange={(event) => dispatch(setPassword(event.target.value))}\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {passwordError}\r\n              </Form.Control.Feedback>\r\n            </Form.Group>\r\n          </Form>\r\n        </Card.Body>\r\n\r\n        <Card.Footer className=\"d-flex\">\r\n          {postRegisterRequestStatus === \"fulfilled\" ? (\r\n            <Redirect to=\"/authentication/login\" />\r\n          ) : (\r\n            <PostRequestButton\r\n              className=\"ml-auto\"\r\n              initiatePostRequest={() => dispatch(postRegisterForm(user))}\r\n              postRequestStatus={postRegisterRequestStatus}\r\n              idleText=\"Submit\"\r\n            />\r\n          )}\r\n        </Card.Footer>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","export async function postLogout() {\r\n  try {\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({}),\r\n    };\r\n\r\n    const response = await fetch(\"/api/authentication/logout\", requestOptions);\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    return null;\r\n  }\r\n}\r\n","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { postLogout } from \"../api.js\";\r\nimport { getAuthenticated } from \"../../../../../../services/authenticatedSlice\";\r\n\r\nconst initialState = {\r\n  postLogoutRequestStatus: \"idle\",\r\n};\r\n\r\nexport const postLogoutRequest = createAsyncThunk(\r\n  \"account/postLogoutRequest\",\r\n  async (_, { dispatch }) => {\r\n    const data = await postLogout();\r\n    await dispatch(getAuthenticated());\r\n    return data;\r\n  }\r\n);\r\n\r\nconst accountSlice = createSlice({\r\n  name: \"account\",\r\n  initialState,\r\n  reducers: {\r\n    reset(state, action) {\r\n      return { ...initialState };\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(postLogoutRequest.pending, (state, action) => {\r\n        state.postLogoutRequestStatus = \"pending\";\r\n      })\r\n      .addCase(postLogoutRequest.fulfilled, (state, action) => {\r\n        state.postLogoutRequestStatus = \"fulfilled\";\r\n      })\r\n      .addCase(postLogoutRequest.rejected, (state, action) => {\r\n        state.postLogoutRequestStatus = \"rejected\";\r\n      });\r\n  },\r\n});\r\n\r\nexport const { reset } = accountSlice.actions;\r\n\r\nexport default accountSlice.reducer;\r\n","export const sGetPostLogoutRequestStatus = (state) =>\r\n  state.authentication.account.postLogoutRequestStatus;\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { useEffect } from \"react\";\r\nimport { postLogoutRequest, reset } from \"./services/accountSlice\";\r\nimport { sGetPostLogoutRequestStatus } from \"./services/accountSlice/selectors.js\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport PostRequestButton from \"../../../../components/PostRequestButton\";\r\nimport { sGetAuthenticatedUser } from \"../../../../services/authenticatedSlice/selectors.js\";\r\n\r\nexport default function () {\r\n  const dispatch = useDispatch();\r\n\r\n  const postLogoutRequestStatus = useSelector(sGetPostLogoutRequestStatus);\r\n  const authenticatedUser = useSelector(sGetAuthenticatedUser);\r\n\r\n  useEffect(() => {\r\n    return function cleanup() {\r\n      dispatch(reset());\r\n    };\r\n  });\r\n\r\n  return (\r\n    <div className=\"authentication-account\">\r\n      <Card className=\"m-4\">\r\n        <Card.Header>\r\n          <h4>Account Management</h4>\r\n        </Card.Header>\r\n        <Card.Body>\r\n          <b>UserID:</b> {authenticatedUser._id}\r\n          <br />\r\n          <b>Username:</b> {authenticatedUser.username}\r\n        </Card.Body>\r\n        <Card.Footer className=\"d-flex\">\r\n          {postLogoutRequestStatus === \"fulfilled\" ? (\r\n            <Redirect exact to=\"/authentication/login\" />\r\n          ) : (\r\n            <PostRequestButton\r\n              className=\"ml-auto\"\r\n              initiatePostRequest={() => dispatch(postLogoutRequest())}\r\n              postRequestStatus={postLogoutRequestStatus}\r\n              idleText=\"Logout\"\r\n            />\r\n          )}\r\n        </Card.Footer>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","import { Switch, Route } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getAuthenticated } from \"../../services/authenticatedSlice\";\r\nimport {\r\n  sGetAuthenticatedRequestStatus,\r\n  sGetHasAuthenticatedBefore,\r\n} from \"../../services/authenticatedSlice/selectors\";\r\n\r\nimport PostRequestLoadingCard from \"../PostRequestLoadingCard\";\r\n\r\nimport Quiz from \"../../areas/Quiz\";\r\nimport Authentication from \"../../areas/Authentication\";\r\n\r\nexport default function () {\r\n  const dispatch = useDispatch();\r\n\r\n  const authenticatedRequestStatus = useSelector(\r\n    sGetAuthenticatedRequestStatus\r\n  );\r\n  const hasAuthenticatedBefore = useSelector(sGetHasAuthenticatedBefore);\r\n\r\n  if (!hasAuthenticatedBefore) {\r\n    dispatch(getAuthenticated());\r\n  }\r\n\r\n  return (\r\n    <div className=\"main\" style={{ backgroundColor: \"white\" }}>\r\n      {authenticatedRequestStatus == \"fulfilled\" ? (\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            This is Home\r\n          </Route>\r\n\r\n          {Quiz()}\r\n          {Authentication()}\r\n\r\n          <Route exact path=\"*\">\r\n            Error 404\r\n          </Route>\r\n        </Switch>\r\n      ) : (\r\n        <PostRequestLoadingCard\r\n          className=\"m-4\"\r\n          initiatePostRequest={() => dispatch(getAuthenticated())}\r\n          postRequestStatus={authenticatedRequestStatus}\r\n          pendingHeaderText=\"Please wait...\"\r\n          rejectedHeaderText=\"Uh oh...\"\r\n          pendingBodyText=\"We are loading some important resources.\"\r\n          rejectedBodyText=\"We were unable to load some important resources.\"\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import { Route } from \"react-router-dom\";\r\nimport ProtectedRoute from \"../../components/ProtectedRoute\";\r\nimport React from \"react\";\r\n\r\nimport Browse from \"./scenes/Browse\";\r\nimport Create from \"./scenes/Create\";\r\nimport Open from \"./scenes/Open\";\r\nimport Take from \"./scenes/Take\";\r\n\r\nexport default function () {\r\n  return [\r\n    <Route exact path=\"/quiz/browse\" key=\"/quiz/browse\">\r\n      <Browse />\r\n    </Route>,\r\n    <ProtectedRoute exact path=\"/quiz/create\" key=\"/quiz/create\">\r\n      <Create />\r\n    </ProtectedRoute>,\r\n    <Route exact path=\"/quiz/open/:id\" key=\"/quiz/open/:id\">\r\n      <Open />\r\n    </Route>,\r\n    <Route exact path=\"/quiz/take/:id\" key=\"/quiz/take/:id\">\r\n      <Take />\r\n    </Route>,\r\n  ];\r\n}\r\n","import { Route } from \"react-router-dom\";\r\nimport ProtectedRoute from \"../../components/ProtectedRoute\";\r\nimport React from \"react\";\r\n\r\nimport Login from \"./scenes/Login\";\r\nimport Register from \"./scenes/Register\";\r\nimport Account from \"./scenes/Account\";\r\n\r\nexport default function () {\r\n  return [\r\n    <Route exact path=\"/authentication/login\" key=\"/authentication/login\">\r\n      <Login />\r\n    </Route>,\r\n    <Route exact path=\"/authentication/register\" key=\"/authentication/register\">\r\n      <Register />\r\n    </Route>,\r\n    <ProtectedRoute\r\n      exact\r\n      path=\"/authentication/account\"\r\n      key=\"/authentication/account\"\r\n    >\r\n      <Account />\r\n    </ProtectedRoute>,\r\n  ];\r\n}\r\n","import { Container, Row, Col, Nav } from \"react-bootstrap\";\r\n\r\nexport default function () {\r\n  return (\r\n    <div className=\"footer\">\r\n      <Container fluid className=\"bg-dark text-light py-4\">\r\n        <Row>\r\n          <Col md={4}>\r\n            <Nav className=\"flex-column align-items-center\">\r\n              <h4>Quizzer</h4>\r\n              <Nav.Link>Contact</Nav.Link>\r\n              <Nav.Link>About</Nav.Link>\r\n              <Nav.Link>Team</Nav.Link>\r\n              <Nav.Link>Join</Nav.Link>\r\n            </Nav>\r\n          </Col>\r\n          <Col md={4}>\r\n            <Nav className=\"flex-column align-items-center\">\r\n              <h4>Help</h4>\r\n              <Nav.Link>FAQs</Nav.Link>\r\n              <Nav.Link>Docs</Nav.Link>\r\n              <Nav.Link>Tutorial</Nav.Link>\r\n            </Nav>\r\n          </Col>\r\n          <Col md={4}>\r\n            <Nav className=\"flex-column align-items-center\">\r\n              <h4>Contribute</h4>\r\n              <Nav.Link>Donate</Nav.Link>\r\n              <Nav.Link>Share</Nav.Link>\r\n            </Nav>\r\n          </Col>\r\n        </Row>\r\n        <hr style={{ backgroundColor: \"white\" }} />\r\n        <small>\r\n          <Row>\r\n            <Col md={8}>\r\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus\r\n              pellentesque euismod viverra. Quisque porta felis id mauris\r\n              molestie\r\n            </Col>\r\n            <Col md={4}>Copyright Quizzer</Col>\r\n          </Row>\r\n        </small>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n","import Header from \"./components/Header\";\nimport Main from \"./components/Main\";\nimport Footer from \"./components/Footer\";\n\nimport \"./styles.css\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Main />\n      <Footer />\n    </div>\n  );\n}\n","import { combineReducers } from \"@reduxjs/toolkit\";\r\n\r\nimport browseReducer from \"../scenes/Browse/services/browseSlice\";\r\nimport createReducer from \"../scenes/Create/services/createSlice\";\r\nimport openReducer from \"../scenes/Open/services/openSlice\";\r\nimport takeReducer from \"../scenes/Take/services/takeSlice\";\r\n\r\nconst quizReducer = combineReducers({\r\n  browse: browseReducer,\r\n  create: createReducer,\r\n  open: openReducer,\r\n  take: takeReducer,\r\n});\r\n\r\nexport default quizReducer;\r\n","import { combineReducers } from \"@reduxjs/toolkit\";\r\n\r\nimport loginReducer from \"../scenes/Login/services/loginSlice\";\r\nimport registerReducer from \"../scenes/Register/services/registerSlice\";\r\nimport accountReducer from \"../scenes/Account/services/accountSlice\";\r\n\r\nconst authenticationReducer = combineReducers({\r\n  login: loginReducer,\r\n  register: registerReducer,\r\n  account: accountReducer,\r\n});\r\n\r\nexport default authenticationReducer;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\n\r\nimport quizReducer from \"../../areas/Quiz/services/quizReducer.js\";\r\nimport authenticationReducer from \"../../areas/Authentication/services/authenticationReducer.js\";\r\nimport authenticatedReducer from \"../authenticatedSlice\";\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    quiz: quizReducer,\r\n    authentication: authenticationReducer,\r\n    authenticated: authenticatedReducer,\r\n  },\r\n});\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./services/redux/store.js\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}